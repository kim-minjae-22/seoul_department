{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9838723,"sourceType":"datasetVersion","datasetId":6035419},{"sourceId":9839034,"sourceType":"datasetVersion","datasetId":6035639}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"mungjae/seoul-data-set\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T00:33:58.547704Z","iopub.execute_input":"2024-11-14T00:33:58.548750Z","iopub.status.idle":"2024-11-14T00:34:00.053142Z","shell.execute_reply.started":"2024-11-14T00:33:58.548691Z","shell.execute_reply":"2024-11-14T00:34:00.052031Z"}},"outputs":[{"name":"stdout","text":"Path to dataset files: /kaggle/input/seoul-data-set\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기\n\n# 예: 집값 데이터셋 파일을 CSV로 불러오기\n# data = pd.read_csv('house_prices.csv')\n\n# 예제 데이터 생성\ndata = pd.read_csv('/kaggle/input/seoul-data-set/.csv', encoding='cp949', low_memory=False)\nprint(len(data))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T00:34:00.055427Z","iopub.execute_input":"2024-11-14T00:34:00.056074Z","iopub.status.idle":"2024-11-14T00:34:13.231761Z","shell.execute_reply.started":"2024-11-14T00:34:00.056032Z","shell.execute_reply":"2024-11-14T00:34:13.230628Z"}},"outputs":[{"name":"stdout","text":"1026032\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# 특성과 타깃 변수 분리\ncols1 = [\"접수연도\", \"자치구명\", \"계약일\", \"건물면적(㎡)\", \"토지면적(㎡)\", \"층\", \"건축년도\", \"건물용도\"]\nX = data[cols1].copy()  # data에서 복사본을 생성하여 할당\n\n# \"건축물의 나이\" 컬럼 추가\nX[\"건축물의 나이\"] = 2024 - X[\"건축년도\"]\n\n# 타깃 변수 분리\ncols2 = [\"물건금액(만원)\"]\ny = data[cols2]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:17:54.192531Z","iopub.execute_input":"2024-11-14T01:17:54.192968Z","iopub.status.idle":"2024-11-14T01:17:54.285075Z","shell.execute_reply.started":"2024-11-14T01:17:54.192929Z","shell.execute_reply":"2024-11-14T01:17:54.283935Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"cols1 = X","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:08.270527Z","iopub.execute_input":"2024-11-14T01:18:08.271086Z","iopub.status.idle":"2024-11-14T01:18:08.277528Z","shell.execute_reply.started":"2024-11-14T01:18:08.271021Z","shell.execute_reply":"2024-11-14T01:18:08.276407Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"# 숫자형 열만 선택하여 NaN 값을 가진 행을 평균값으로 대체\nX_cleaned = X.copy()  # 원본 데이터프레임을 유지하기 위해 복사\nnumeric_columns = X.select_dtypes(include=['number']).columns  # 숫자형 열만 선택\nX_cleaned[numeric_columns] = X_cleaned[numeric_columns].fillna(X[numeric_columns].mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:10.646644Z","iopub.execute_input":"2024-11-14T01:18:10.647438Z","iopub.status.idle":"2024-11-14T01:18:10.843171Z","shell.execute_reply.started":"2024-11-14T01:18:10.647395Z","shell.execute_reply":"2024-11-14T01:18:10.842112Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"print(len(X_cleaned))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:11.391824Z","iopub.execute_input":"2024-11-14T01:18:11.392533Z","iopub.status.idle":"2024-11-14T01:18:11.397966Z","shell.execute_reply.started":"2024-11-14T01:18:11.392486Z","shell.execute_reply":"2024-11-14T01:18:11.396821Z"}},"outputs":[{"name":"stdout","text":"1026032\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"y","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T00:39:10.658138Z","iopub.execute_input":"2024-11-14T00:39:10.659221Z","iopub.status.idle":"2024-11-14T00:39:10.675614Z","shell.execute_reply.started":"2024-11-14T00:39:10.659169Z","shell.execute_reply":"2024-11-14T00:39:10.674168Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"         물건금액(만원)\n0           33500\n1           90000\n2          190000\n3           11000\n4           27250\n...           ...\n1026027     46500\n1026028     46500\n1026029     48000\n1026030     18000\n1026031     71000\n\n[1026032 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>물건금액(만원)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>33500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>90000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>190000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27250</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1026027</th>\n      <td>46500</td>\n    </tr>\n    <tr>\n      <th>1026028</th>\n      <td>46500</td>\n    </tr>\n    <tr>\n      <th>1026029</th>\n      <td>48000</td>\n    </tr>\n    <tr>\n      <th>1026030</th>\n      <td>18000</td>\n    </tr>\n    <tr>\n      <th>1026031</th>\n      <td>71000</td>\n    </tr>\n  </tbody>\n</table>\n<p>1026032 rows × 1 columns</p>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":" y_cleaned = y","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:16.725944Z","iopub.execute_input":"2024-11-14T01:18:16.726365Z","iopub.status.idle":"2024-11-14T01:18:16.731283Z","shell.execute_reply.started":"2024-11-14T01:18:16.726311Z","shell.execute_reply":"2024-11-14T01:18:16.730007Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"X_cleaned","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:29.318181Z","iopub.execute_input":"2024-11-14T01:18:29.318622Z","iopub.status.idle":"2024-11-14T01:18:29.341183Z","shell.execute_reply.started":"2024-11-14T01:18:29.318568Z","shell.execute_reply":"2024-11-14T01:18:29.340027Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"         접수연도  자치구명       계약일  건물면적(㎡)     토지면적(㎡)          층    건축년도   건물용도  \\\n0        2023   은평구  20240202    43.04   37.000000   2.000000  2005.0  연립다세대   \n1        2023   동작구  20240201   146.14   98.600000   6.921255  1987.0  단독다가구   \n2        2023   동작구  20240201   148.23  202.700000   6.921255  1970.0  단독다가구   \n3        2023   송파구  20240123    13.38   10.610000   5.000000  2012.0  연립다세대   \n4        2023   구로구  20240109    29.18   20.130000   5.000000  2023.0  연립다세대   \n...       ...   ...       ...      ...         ...        ...     ...    ...   \n1026027  2018   성동구  20131203    59.99    0.000000   4.000000  2009.0    아파트   \n1026028  2018   성동구  20131126    59.99    0.000000   3.000000  2009.0    아파트   \n1026029  2018   성동구  20121101   114.46   30.596834  18.000000  1996.0    아파트   \n1026030  2018   은평구  20080915    54.47   25.270000   1.000000  2001.0  연립다세대   \n1026031  2018  영등포구  20080615    94.31    0.000000   7.000000  1977.0    아파트   \n\n         건축물의 나이  \n0           19.0  \n1           37.0  \n2           54.0  \n3           12.0  \n4            1.0  \n...          ...  \n1026027     15.0  \n1026028     15.0  \n1026029     28.0  \n1026030     23.0  \n1026031     47.0  \n\n[1026032 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>접수연도</th>\n      <th>자치구명</th>\n      <th>계약일</th>\n      <th>건물면적(㎡)</th>\n      <th>토지면적(㎡)</th>\n      <th>층</th>\n      <th>건축년도</th>\n      <th>건물용도</th>\n      <th>건축물의 나이</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023</td>\n      <td>은평구</td>\n      <td>20240202</td>\n      <td>43.04</td>\n      <td>37.000000</td>\n      <td>2.000000</td>\n      <td>2005.0</td>\n      <td>연립다세대</td>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023</td>\n      <td>동작구</td>\n      <td>20240201</td>\n      <td>146.14</td>\n      <td>98.600000</td>\n      <td>6.921255</td>\n      <td>1987.0</td>\n      <td>단독다가구</td>\n      <td>37.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023</td>\n      <td>동작구</td>\n      <td>20240201</td>\n      <td>148.23</td>\n      <td>202.700000</td>\n      <td>6.921255</td>\n      <td>1970.0</td>\n      <td>단독다가구</td>\n      <td>54.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023</td>\n      <td>송파구</td>\n      <td>20240123</td>\n      <td>13.38</td>\n      <td>10.610000</td>\n      <td>5.000000</td>\n      <td>2012.0</td>\n      <td>연립다세대</td>\n      <td>12.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023</td>\n      <td>구로구</td>\n      <td>20240109</td>\n      <td>29.18</td>\n      <td>20.130000</td>\n      <td>5.000000</td>\n      <td>2023.0</td>\n      <td>연립다세대</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1026027</th>\n      <td>2018</td>\n      <td>성동구</td>\n      <td>20131203</td>\n      <td>59.99</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>2009.0</td>\n      <td>아파트</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>1026028</th>\n      <td>2018</td>\n      <td>성동구</td>\n      <td>20131126</td>\n      <td>59.99</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>2009.0</td>\n      <td>아파트</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>1026029</th>\n      <td>2018</td>\n      <td>성동구</td>\n      <td>20121101</td>\n      <td>114.46</td>\n      <td>30.596834</td>\n      <td>18.000000</td>\n      <td>1996.0</td>\n      <td>아파트</td>\n      <td>28.0</td>\n    </tr>\n    <tr>\n      <th>1026030</th>\n      <td>2018</td>\n      <td>은평구</td>\n      <td>20080915</td>\n      <td>54.47</td>\n      <td>25.270000</td>\n      <td>1.000000</td>\n      <td>2001.0</td>\n      <td>연립다세대</td>\n      <td>23.0</td>\n    </tr>\n    <tr>\n      <th>1026031</th>\n      <td>2018</td>\n      <td>영등포구</td>\n      <td>20080615</td>\n      <td>94.31</td>\n      <td>0.000000</td>\n      <td>7.000000</td>\n      <td>1977.0</td>\n      <td>아파트</td>\n      <td>47.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>1026032 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X_cleaned, y_cleaned, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:41.251662Z","iopub.execute_input":"2024-11-14T01:18:41.252125Z","iopub.status.idle":"2024-11-14T01:18:41.648874Z","shell.execute_reply.started":"2024-11-14T01:18:41.252084Z","shell.execute_reply":"2024-11-14T01:18:41.647751Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"import pandas  as pd\nimport numpy   as np\nimport xgboost as xgb","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:42.300461Z","iopub.execute_input":"2024-11-14T01:18:42.300893Z","iopub.status.idle":"2024-11-14T01:18:42.306191Z","shell.execute_reply.started":"2024-11-14T01:18:42.300852Z","shell.execute_reply":"2024-11-14T01:18:42.304922Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"X_train['접수연도'] = X_train['접수연도'].astype('category')\nX_train['건축년도'] = X_train['건축년도'].astype('category')\nX_train['건물용도'] = X_train['건물용도'].astype('category')\nX_train['자치구명'] = X_train['자치구명'].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:43.484280Z","iopub.execute_input":"2024-11-14T01:18:43.485053Z","iopub.status.idle":"2024-11-14T01:18:43.743317Z","shell.execute_reply.started":"2024-11-14T01:18:43.485008Z","shell.execute_reply":"2024-11-14T01:18:43.741860Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# 필요한 열을 인코딩\nX_train['접수연도'] = X_train['접수연도'].astype('category')\nX_train['건축년도'] = X_train['건축년도'].astype('category')\nX_train['건물용도'] = X_train['건물용도'].astype('category')\nX_train['자치구명'] = X_train['자치구명'].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:44.196128Z","iopub.execute_input":"2024-11-14T01:18:44.196576Z","iopub.status.idle":"2024-11-14T01:18:44.206587Z","shell.execute_reply.started":"2024-11-14T01:18:44.196535Z","shell.execute_reply":"2024-11-14T01:18:44.205360Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"print(X_train.dtypes)  # object 타입 열을 모두 확인하기","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:44.802868Z","iopub.execute_input":"2024-11-14T01:18:44.803326Z","iopub.status.idle":"2024-11-14T01:18:44.811065Z","shell.execute_reply.started":"2024-11-14T01:18:44.803282Z","shell.execute_reply":"2024-11-14T01:18:44.809663Z"}},"outputs":[{"name":"stdout","text":"접수연도       category\n자치구명       category\n계약일           int64\n건물면적(㎡)     float64\n토지면적(㎡)     float64\n층           float64\n건축년도       category\n건물용도       category\n건축물의 나이     float64\ndtype: object\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"print(X_train.columns)\nprint(X_test.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:18:50.222309Z","iopub.execute_input":"2024-11-14T01:18:50.222772Z","iopub.status.idle":"2024-11-14T01:18:50.229361Z","shell.execute_reply.started":"2024-11-14T01:18:50.222730Z","shell.execute_reply":"2024-11-14T01:18:50.228188Z"}},"outputs":[{"name":"stdout","text":"Index(['접수연도', '자치구명', '계약일', '건물면적(㎡)', '토지면적(㎡)', '층', '건축년도', '건물용도',\n       '건축물의 나이'],\n      dtype='object')\nIndex(['접수연도', '자치구명', '계약일', '건물면적(㎡)', '토지면적(㎡)', '층', '건축년도', '건물용도',\n       '건축물의 나이'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":44},{"cell_type":"code","source":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n# 카테고리형 컬럼을 Label Encoding으로 변환\nfor col in X_train.select_dtypes(include=['category', 'object']).columns:\n    le = LabelEncoder()\n    X_train[col] = le.fit_transform(X_train[col])\n\n# 모델 정의\nregressor = XGBRegressor()\n\n# 파라미터 그리드 설정\nparam_grid = {\n    \"max_depth\": [4, 5],\n    \"n_estimators\": [500, 600],\n    \"learning_rate\": [0.01, 0.015]\n}\n\n# 그리드 서치 실행\nsearch = GridSearchCV(regressor, param_grid, cv=5).fit(X_train, y_train)\nprint(\"The best hyperparameters are \", search.best_params_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:21:28.826633Z","iopub.execute_input":"2024-11-14T01:21:28.827080Z","iopub.status.idle":"2024-11-14T01:31:13.768250Z","shell.execute_reply.started":"2024-11-14T01:21:28.827040Z","shell.execute_reply":"2024-11-14T01:31:13.767382Z"}},"outputs":[{"name":"stdout","text":"The best hyperparameters are  {'learning_rate': 0.015, 'max_depth': 5, 'n_estimators': 600}\n","output_type":"stream"}],"execution_count":46},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(learning_rate = search.best_params_[\"learning_rate\"],\n                           n_estimators  = search.best_params_[\"n_estimators\"],\n                           max_depth     = search.best_params_[\"max_depth\"],\n                           eval_metric='rmsle')\n\nregressor.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:31:18.395665Z","iopub.execute_input":"2024-11-14T01:31:18.396139Z","iopub.status.idle":"2024-11-14T01:31:37.980637Z","shell.execute_reply.started":"2024-11-14T01:31:18.396098Z","shell.execute_reply":"2024-11-14T01:31:37.979655Z"}},"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric='rmsle', feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=5, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=600, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=5, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=600, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=5, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=600, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":47},{"cell_type":"code","source":"import pickle\nwith open(\"xgboost_feature_full.pkl\", \"wb\") as f:\n    pickle.dump(regressor, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:31:39.635295Z","iopub.execute_input":"2024-11-14T01:31:39.635769Z","iopub.status.idle":"2024-11-14T01:31:39.656279Z","shell.execute_reply.started":"2024-11-14T01:31:39.635727Z","shell.execute_reply":"2024-11-14T01:31:39.655320Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"import matplotlib.font_manager as fm\n', '.join(sorted([font.name for font in fm.fontManager.ttflist]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:31:40.924857Z","iopub.execute_input":"2024-11-14T01:31:40.925268Z","iopub.status.idle":"2024-11-14T01:31:40.933583Z","shell.execute_reply.started":"2024-11-14T01:31:40.925229Z","shell.execute_reply":"2024-11-14T01:31:40.932367Z"}},"outputs":[{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"'DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans Display, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif Display, Latin Modern Math, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono Caps, Latin Modern Mono Caps, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light Cond, Latin Modern Mono Light Cond, Latin Modern Mono Prop, Latin Modern Mono Prop, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Slanted, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman Caps, Latin Modern Roman Caps, Latin Modern Roman Demi, Latin Modern Roman Demi, Latin Modern Roman Dunhill, Latin Modern Roman Dunhill, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Unslanted, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans Demi Cond, Latin Modern Sans Demi Cond, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, STIXGeneral, STIXGeneral, STIXGeneral, STIXGeneral, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXSizeFiveSym, STIXSizeFourSym, STIXSizeFourSym, STIXSizeOneSym, STIXSizeOneSym, STIXSizeThreeSym, STIXSizeThreeSym, STIXSizeTwoSym, STIXSizeTwoSym, cmb10, cmex10, cmmi10, cmr10, cmss10, cmsy10, cmtt10'"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"from xgboost import plot_importance\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\n# 한글 폰트 경로 지정\nfont_path = '/kaggle/input/nanumfontsetup-ttf-square/NanumSquare_acB.ttf'\nfont_prop = FontProperties(fname=font_path)\n\n# 스타일 및 폰트 크기 설정\nplt.style.use('fivethirtyeight')\nplt.rcParams.update({'font.size': 16})\n\n# 플롯 생성 및 한글 폰트 적용\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# 중요도 유형을 'weight' 또는 'gain'으로 설정\nplot_importance(regressor, max_num_features=8, importance_type='weight', ax=ax)  # importance_type을 'weight'로 설정\n\n# 또는 'gain'으로 설정할 수도 있습니다:\n# plot_importance(regressor, max_num_features=8, importance_type='gain', ax=ax)\n\n# x축과 y축 폰트 설정\nfor label in ax.get_yticklabels():\n    label.set_fontproperties(font_prop)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:31:41.597433Z","iopub.execute_input":"2024-11-14T01:31:41.597854Z","iopub.status.idle":"2024-11-14T01:31:41.889768Z","shell.execute_reply.started":"2024-11-14T01:31:41.597813Z","shell.execute_reply":"2024-11-14T01:31:41.888595Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# 카테고리형 컬럼을 Label Encoding으로 변환\nfor col in X_test.select_dtypes(include=['object']).columns:\n    le = LabelEncoder()\n    X_test[col] = le.fit_transform(X_test[col])\n\n# 예측 실행\nresult = regressor.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:33:32.556759Z","iopub.execute_input":"2024-11-14T01:33:32.557221Z","iopub.status.idle":"2024-11-14T01:33:33.683354Z","shell.execute_reply.started":"2024-11-14T01:33:32.557178Z","shell.execute_reply":"2024-11-14T01:33:33.682412Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:33:41.339589Z","iopub.execute_input":"2024-11-14T01:33:41.340016Z","iopub.status.idle":"2024-11-14T01:33:41.348128Z","shell.execute_reply.started":"2024-11-14T01:33:41.339978Z","shell.execute_reply":"2024-11-14T01:33:41.346833Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"array([ 28911.406, 113212.31 ,  24356.463, ...,  40958.812,  68528.13 ,\n        38187.195], dtype=float32)"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"from sklearn.metrics import r2_score, mean_squared_error\n\n# 예측값\npredictions = regressor.predict(X_test)\n\n# R² 점수 계산\nr2 = r2_score(y_test, predictions)\nprint(\"R² 점수:\", r2)\n\n# 평균 제곱 오차 (MSE) 계산\nmse = mean_squared_error(y_test, predictions)\nprint(\"평균 제곱 오차 (MSE):\", mse)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T01:35:17.210032Z","iopub.execute_input":"2024-11-14T01:35:17.210508Z","iopub.status.idle":"2024-11-14T01:35:18.175050Z","shell.execute_reply.started":"2024-11-14T01:35:17.210465Z","shell.execute_reply":"2024-11-14T01:35:18.174154Z"}},"outputs":[{"name":"stdout","text":"R² 점수: 0.4307867144507723\n평균 제곱 오차 (MSE): 2601114712.752228\n","output_type":"stream"}],"execution_count":55},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# 모델의 특성 중요도 확인\nimportances = regressor.feature_importances_\n\n# 중요도와 함께 특성 이름을 데이터프레임으로 변환\nfeature_names = X_train.columns  # X_train이 pandas DataFrame인 경우\nfeatures_importance_df = pd.DataFrame({\n    'Feature': feature_names,\n    'Importance': importances\n})\n\n# 중요도가 높은 순서대로 정렬\nfeatures_importance_df = features_importance_df.sort_values(by='Importance', ascending=False)\n\n# 상위 8개 특성 출력\nprint(features_importance_df.head(8))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T02:02:22.209681Z","iopub.execute_input":"2024-11-14T02:02:22.210147Z","iopub.status.idle":"2024-11-14T02:02:22.226092Z","shell.execute_reply.started":"2024-11-14T02:02:22.210104Z","shell.execute_reply":"2024-11-14T02:02:22.224867Z"}},"outputs":[{"name":"stdout","text":"   Feature  Importance\n3  건물면적(㎡)    0.239046\n7     건물용도    0.197257\n2      계약일    0.137066\n4  토지면적(㎡)    0.135478\n0     접수연도    0.108519\n1     자치구명    0.086683\n6     건축년도    0.068073\n5        층    0.027877\n","output_type":"stream"}],"execution_count":56},{"cell_type":"code","source":"# Use just 3 columns => demo in streamlit app by getting only 3 inputs from users\ncols = [\"건축물의 나이\", \"자치구명\", \"건물면적(㎡)\",\"계약일\"]\nX_train = X_train[cols]\nX_test = X_test[cols]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T02:02:43.818803Z","iopub.execute_input":"2024-11-14T02:02:43.819841Z","iopub.status.idle":"2024-11-14T02:02:43.842222Z","shell.execute_reply.started":"2024-11-14T02:02:43.819795Z","shell.execute_reply":"2024-11-14T02:02:43.840911Z"}},"outputs":[],"execution_count":57},{"cell_type":"code","source":"X_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T02:02:46.927895Z","iopub.execute_input":"2024-11-14T02:02:46.928597Z","iopub.status.idle":"2024-11-14T02:02:46.941433Z","shell.execute_reply.started":"2024-11-14T02:02:46.928553Z","shell.execute_reply":"2024-11-14T02:02:46.940222Z"}},"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"         건축물의 나이  자치구명  건물면적(㎡)       계약일\n804947      28.0     8    45.76  20170412\n627878      42.0     0    49.56  20190615\n729908      14.0     6    84.99  20170722\n1006046     20.0    12    84.69  20180113\n84514       23.0    13    84.33  20240821","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>건축물의 나이</th>\n      <th>자치구명</th>\n      <th>건물면적(㎡)</th>\n      <th>계약일</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>804947</th>\n      <td>28.0</td>\n      <td>8</td>\n      <td>45.76</td>\n      <td>20170412</td>\n    </tr>\n    <tr>\n      <th>627878</th>\n      <td>42.0</td>\n      <td>0</td>\n      <td>49.56</td>\n      <td>20190615</td>\n    </tr>\n    <tr>\n      <th>729908</th>\n      <td>14.0</td>\n      <td>6</td>\n      <td>84.99</td>\n      <td>20170722</td>\n    </tr>\n    <tr>\n      <th>1006046</th>\n      <td>20.0</td>\n      <td>12</td>\n      <td>84.69</td>\n      <td>20180113</td>\n    </tr>\n    <tr>\n      <th>84514</th>\n      <td>23.0</td>\n      <td>13</td>\n      <td>84.33</td>\n      <td>20240821</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":58},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(eval_metric='rmsle')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T02:02:47.668751Z","iopub.execute_input":"2024-11-14T02:02:47.669177Z","iopub.status.idle":"2024-11-14T02:02:47.674291Z","shell.execute_reply.started":"2024-11-14T02:02:47.669139Z","shell.execute_reply":"2024-11-14T02:02:47.673018Z"}},"outputs":[],"execution_count":59},{"cell_type":"code","source":"X_train.loc[:, \"자치구명\"] = X_train[\"자치구명\"].astype('category')\nX_test.loc[:, \"자치구명\"] = X_test[\"자치구명\"].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T02:02:52.309387Z","iopub.execute_input":"2024-11-14T02:02:52.309818Z","iopub.status.idle":"2024-11-14T02:02:52.339771Z","shell.execute_reply.started":"2024-11-14T02:02:52.309771Z","shell.execute_reply":"2024-11-14T02:02:52.338679Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Label Encoding: 범주형 컬럼을 숫자형으로 변환\nlabel_encoder = LabelEncoder()\nfor col in X_train.select_dtypes(include=['object']).columns:\n    X_train[col] = label_encoder.fit_transform(X_train[col])\n    X_test[col] = label_encoder.transform(X_test[col])  # 테스트 데이터에도 동일한 변환 적용","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T02:19:46.571412Z","iopub.execute_input":"2024-11-14T02:19:46.571895Z","iopub.status.idle":"2024-11-14T02:19:47.367307Z","shell.execute_reply.started":"2024-11-14T02:19:46.571851Z","shell.execute_reply":"2024-11-14T02:19:47.365279Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/_encode.py:224\u001b[0m, in \u001b[0;36m_encode\u001b[0;34m(values, uniques, check_unknown)\u001b[0m\n\u001b[1;32m    223\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 224\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_map_to_integer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muniques\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    225\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/_encode.py:164\u001b[0m, in \u001b[0;36m_map_to_integer\u001b[0;34m(values, uniques)\u001b[0m\n\u001b[1;32m    163\u001b[0m table \u001b[38;5;241m=\u001b[39m _nandict({val: i \u001b[38;5;28;01mfor\u001b[39;00m i, val \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(uniques)})\n\u001b[0;32m--> 164\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m np\u001b[38;5;241m.\u001b[39marray([table[v] \u001b[38;5;28;01mfor\u001b[39;00m v \u001b[38;5;129;01min\u001b[39;00m values])\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/_encode.py:164\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    163\u001b[0m table \u001b[38;5;241m=\u001b[39m _nandict({val: i \u001b[38;5;28;01mfor\u001b[39;00m i, val \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(uniques)})\n\u001b[0;32m--> 164\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m np\u001b[38;5;241m.\u001b[39marray([\u001b[43mtable\u001b[49m\u001b[43m[\u001b[49m\u001b[43mv\u001b[49m\u001b[43m]\u001b[49m \u001b[38;5;28;01mfor\u001b[39;00m v \u001b[38;5;129;01min\u001b[39;00m values])\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/_encode.py:158\u001b[0m, in \u001b[0;36m_nandict.__missing__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    157\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnan_value\n\u001b[0;32m--> 158\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key)\n","\u001b[0;31mKeyError\u001b[0m: nan","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[64], line 7\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m col \u001b[38;5;129;01min\u001b[39;00m X_train\u001b[38;5;241m.\u001b[39mselect_dtypes(include\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mcolumns:\n\u001b[1;32m      6\u001b[0m     X_train[col] \u001b[38;5;241m=\u001b[39m label_encoder\u001b[38;5;241m.\u001b[39mfit_transform(X_train[col])\n\u001b[0;32m----> 7\u001b[0m     X_test[col] \u001b[38;5;241m=\u001b[39m \u001b[43mlabel_encoder\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtransform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_test\u001b[49m\u001b[43m[\u001b[49m\u001b[43mcol\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# 테스트 데이터에도 동일한 변환 적용\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/_set_output.py:140\u001b[0m, in \u001b[0;36m_wrap_method_output.<locals>.wrapped\u001b[0;34m(self, X, *args, **kwargs)\u001b[0m\n\u001b[1;32m    138\u001b[0m \u001b[38;5;129m@wraps\u001b[39m(f)\n\u001b[1;32m    139\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwrapped\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m--> 140\u001b[0m     data_to_wrap \u001b[38;5;241m=\u001b[39m \u001b[43mf\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    141\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(data_to_wrap, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m    142\u001b[0m         \u001b[38;5;66;03m# only wrap the first output for cross decomposition\u001b[39;00m\n\u001b[1;32m    143\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m (\n\u001b[1;32m    144\u001b[0m             _wrap_data_with_container(method, data_to_wrap[\u001b[38;5;241m0\u001b[39m], X, \u001b[38;5;28mself\u001b[39m),\n\u001b[1;32m    145\u001b[0m             \u001b[38;5;241m*\u001b[39mdata_to_wrap[\u001b[38;5;241m1\u001b[39m:],\n\u001b[1;32m    146\u001b[0m         )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_label.py:139\u001b[0m, in \u001b[0;36mLabelEncoder.transform\u001b[0;34m(self, y)\u001b[0m\n\u001b[1;32m    136\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m _num_samples(y) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m    137\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m np\u001b[38;5;241m.\u001b[39marray([])\n\u001b[0;32m--> 139\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_encode\u001b[49m\u001b[43m(\u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43muniques\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mclasses_\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/_encode.py:226\u001b[0m, in \u001b[0;36m_encode\u001b[0;34m(values, uniques, check_unknown)\u001b[0m\n\u001b[1;32m    224\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m _map_to_integer(values, uniques)\n\u001b[1;32m    225\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m--> 226\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124my contains previously unseen labels: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mstr\u001b[39m(e)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    227\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    228\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m check_unknown:\n","\u001b[0;31mValueError\u001b[0m: y contains previously unseen labels: nan"],"ename":"ValueError","evalue":"y contains previously unseen labels: nan","output_type":"error"}],"execution_count":64},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nimport joblib\nfrom sklearn.model_selection import train_test_split\n\n# 데이터를 학습용과 테스트용으로 나누기\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# 모델 정의 및 학습\nregressor = xgb.XGBRegressor(eval_metric='rmsle')\nregressor.fit(X_train, y_train)\n\n# 모델의 특성 중요도 확인\nimportances = regressor.feature_importances_\n\n# 중요도와 함께 특성 이름을 데이터프레임으로 변환\nfeature_names = X_train.columns\nfeatures_importance_df = pd.DataFrame({\n    'Feature': feature_names,\n    'Importance': importances\n})\n\n# 중요도가 높은 순서대로 정렬\nfeatures_importance_df = features_importance_df.sort_values(by='Importance', ascending=False)\n\n# 상위 8개 특성 출력\nprint(features_importance_df.head(8))\n\n# 모델을 저장 (학습이 완료된 후)\njoblib.dump(regressor, 'xgb_model.pkl')\n\n# 모델을 로드\nregressor = joblib.load('xgb_model.pkl')\n\n# 예측 실행\nresult = regressor.predict(X_test)\n\nprint(result)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-14T02:08:19.305991Z","iopub.execute_input":"2024-11-14T02:08:19.306473Z","iopub.status.idle":"2024-11-14T02:08:20.341815Z","shell.execute_reply.started":"2024-11-14T02:08:19.306430Z","shell.execute_reply":"2024-11-14T02:08:20.339598Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[63], line 12\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[38;5;66;03m# 모델 정의 및 학습\u001b[39;00m\n\u001b[1;32m     11\u001b[0m regressor \u001b[38;5;241m=\u001b[39m xgb\u001b[38;5;241m.\u001b[39mXGBRegressor(eval_metric\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mrmsle\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m---> 12\u001b[0m \u001b[43mregressor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# 모델의 특성 중요도 확인\u001b[39;00m\n\u001b[1;32m     15\u001b[0m importances \u001b[38;5;241m=\u001b[39m regressor\u001b[38;5;241m.\u001b[39mfeature_importances_\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:730\u001b[0m, in \u001b[0;36mrequire_keyword_args.<locals>.throw_if.<locals>.inner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m k, arg \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(sig\u001b[38;5;241m.\u001b[39mparameters, args):\n\u001b[1;32m    729\u001b[0m     kwargs[k] \u001b[38;5;241m=\u001b[39m arg\n\u001b[0;32m--> 730\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:1055\u001b[0m, in \u001b[0;36mXGBModel.fit\u001b[0;34m(self, X, y, sample_weight, base_margin, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, base_margin_eval_set, feature_weights, callbacks)\u001b[0m\n\u001b[1;32m   1053\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(verbosity\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mverbosity):\n\u001b[1;32m   1054\u001b[0m     evals_result: TrainingCallback\u001b[38;5;241m.\u001b[39mEvalsLog \u001b[38;5;241m=\u001b[39m {}\n\u001b[0;32m-> 1055\u001b[0m     train_dmatrix, evals \u001b[38;5;241m=\u001b[39m \u001b[43m_wrap_evaluation_matrices\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1056\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmissing\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmissing\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1057\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1058\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1059\u001b[0m \u001b[43m        \u001b[49m\u001b[43mgroup\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1060\u001b[0m \u001b[43m        \u001b[49m\u001b[43mqid\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1061\u001b[0m \u001b[43m        \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msample_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1062\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbase_margin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase_margin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1063\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfeature_weights\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfeature_weights\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1064\u001b[0m \u001b[43m        \u001b[49m\u001b[43meval_set\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43meval_set\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1065\u001b[0m \u001b[43m        \u001b[49m\u001b[43msample_weight_eval_set\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msample_weight_eval_set\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1066\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbase_margin_eval_set\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase_margin_eval_set\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1067\u001b[0m \u001b[43m        \u001b[49m\u001b[43meval_group\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1068\u001b[0m \u001b[43m        \u001b[49m\u001b[43meval_qid\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m   1069\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcreate_dmatrix\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_create_dmatrix\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1070\u001b[0m \u001b[43m        \u001b[49m\u001b[43menable_categorical\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43menable_categorical\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1071\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfeature_types\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfeature_types\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1072\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1073\u001b[0m     params \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_xgb_params()\n\u001b[1;32m   1075\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mcallable\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobjective):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:521\u001b[0m, in \u001b[0;36m_wrap_evaluation_matrices\u001b[0;34m(missing, X, y, group, qid, sample_weight, base_margin, feature_weights, eval_set, sample_weight_eval_set, base_margin_eval_set, eval_group, eval_qid, create_dmatrix, enable_categorical, feature_types)\u001b[0m\n\u001b[1;32m    501\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_wrap_evaluation_matrices\u001b[39m(\n\u001b[1;32m    502\u001b[0m     missing: \u001b[38;5;28mfloat\u001b[39m,\n\u001b[1;32m    503\u001b[0m     X: Any,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    517\u001b[0m     feature_types: Optional[FeatureTypes],\n\u001b[1;32m    518\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tuple[Any, List[Tuple[Any, \u001b[38;5;28mstr\u001b[39m]]]:\n\u001b[1;32m    519\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Convert array_like evaluation matrices into DMatrix.  Perform validation on the\u001b[39;00m\n\u001b[1;32m    520\u001b[0m \u001b[38;5;124;03m    way.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 521\u001b[0m     train_dmatrix \u001b[38;5;241m=\u001b[39m \u001b[43mcreate_dmatrix\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    522\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    524\u001b[0m \u001b[43m        \u001b[49m\u001b[43mgroup\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    525\u001b[0m \u001b[43m        \u001b[49m\u001b[43mqid\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mqid\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    526\u001b[0m \u001b[43m        \u001b[49m\u001b[43mweight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msample_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    527\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbase_margin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase_margin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    528\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfeature_weights\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfeature_weights\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    529\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmissing\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmissing\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    530\u001b[0m \u001b[43m        \u001b[49m\u001b[43menable_categorical\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43menable_categorical\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    531\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfeature_types\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfeature_types\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    532\u001b[0m \u001b[43m        \u001b[49m\u001b[43mref\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    533\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    535\u001b[0m     n_validation \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m eval_set \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(eval_set)\n\u001b[1;32m    537\u001b[0m     \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvalidate_or_none\u001b[39m(meta: Optional[Sequence], name: \u001b[38;5;28mstr\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Sequence:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:958\u001b[0m, in \u001b[0;36mXGBModel._create_dmatrix\u001b[0;34m(self, ref, **kwargs)\u001b[0m\n\u001b[1;32m    956\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m _can_use_qdm(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtree_method) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbooster \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgblinear\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    957\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 958\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mQuantileDMatrix\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    959\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mref\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mref\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnthread\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mn_jobs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmax_bin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmax_bin\u001b[49m\n\u001b[1;32m    960\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    961\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:  \u001b[38;5;66;03m# `QuantileDMatrix` supports lesser types than DMatrix\u001b[39;00m\n\u001b[1;32m    962\u001b[0m         \u001b[38;5;28;01mpass\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:730\u001b[0m, in \u001b[0;36mrequire_keyword_args.<locals>.throw_if.<locals>.inner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m k, arg \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(sig\u001b[38;5;241m.\u001b[39mparameters, args):\n\u001b[1;32m    729\u001b[0m     kwargs[k] \u001b[38;5;241m=\u001b[39m arg\n\u001b[0;32m--> 730\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:1529\u001b[0m, in \u001b[0;36mQuantileDMatrix.__init__\u001b[0;34m(self, data, label, weight, base_margin, missing, silent, feature_names, feature_types, nthread, max_bin, ref, group, qid, label_lower_bound, label_upper_bound, feature_weights, enable_categorical, data_split_mode)\u001b[0m\n\u001b[1;32m   1509\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28many\u001b[39m(\n\u001b[1;32m   1510\u001b[0m         info \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   1511\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m info \u001b[38;5;129;01min\u001b[39;00m (\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1522\u001b[0m         )\n\u001b[1;32m   1523\u001b[0m     ):\n\u001b[1;32m   1524\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1525\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIf data iterator is used as input, data like label should be \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1526\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mspecified as batch argument.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1527\u001b[0m         )\n\u001b[0;32m-> 1529\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_init\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1530\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1531\u001b[0m \u001b[43m    \u001b[49m\u001b[43mref\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mref\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1532\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlabel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1533\u001b[0m \u001b[43m    \u001b[49m\u001b[43mweight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mweight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1534\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbase_margin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase_margin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1535\u001b[0m \u001b[43m    \u001b[49m\u001b[43mgroup\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgroup\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1536\u001b[0m \u001b[43m    \u001b[49m\u001b[43mqid\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mqid\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1537\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlabel_lower_bound\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabel_lower_bound\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1538\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlabel_upper_bound\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabel_upper_bound\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1539\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfeature_weights\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfeature_weights\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1540\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfeature_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfeature_names\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1541\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfeature_types\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfeature_types\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1542\u001b[0m \u001b[43m    \u001b[49m\u001b[43menable_categorical\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43menable_categorical\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1543\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:1588\u001b[0m, in \u001b[0;36mQuantileDMatrix._init\u001b[0;34m(self, data, ref, enable_categorical, **meta)\u001b[0m\n\u001b[1;32m   1576\u001b[0m config \u001b[38;5;241m=\u001b[39m make_jcargs(\n\u001b[1;32m   1577\u001b[0m     nthread\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnthread, missing\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmissing, max_bin\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmax_bin\n\u001b[1;32m   1578\u001b[0m )\n\u001b[1;32m   1579\u001b[0m ret \u001b[38;5;241m=\u001b[39m _LIB\u001b[38;5;241m.\u001b[39mXGQuantileDMatrixCreateFromCallback(\n\u001b[1;32m   1580\u001b[0m     \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m   1581\u001b[0m     it\u001b[38;5;241m.\u001b[39mproxy\u001b[38;5;241m.\u001b[39mhandle,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1586\u001b[0m     ctypes\u001b[38;5;241m.\u001b[39mbyref(handle),\n\u001b[1;32m   1587\u001b[0m )\n\u001b[0;32m-> 1588\u001b[0m \u001b[43mit\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreraise\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1589\u001b[0m \u001b[38;5;66;03m# delay check_call to throw intermediate exception first\u001b[39;00m\n\u001b[1;32m   1590\u001b[0m _check_call(ret)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:576\u001b[0m, in \u001b[0;36mDataIter.reraise\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    574\u001b[0m exc \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exception\n\u001b[1;32m    575\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_exception \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[0;32m--> 576\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m exc\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:557\u001b[0m, in \u001b[0;36mDataIter._handle_exception\u001b[0;34m(self, fn, dft_ret)\u001b[0m\n\u001b[1;32m    554\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m dft_ret\n\u001b[1;32m    556\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 557\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    558\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:  \u001b[38;5;66;03m# pylint: disable=broad-except\u001b[39;00m\n\u001b[1;32m    559\u001b[0m     \u001b[38;5;66;03m# Defer the exception in order to return 0 and stop the iteration.\u001b[39;00m\n\u001b[1;32m    560\u001b[0m     \u001b[38;5;66;03m# Exception inside a ctype callback function has no effect except\u001b[39;00m\n\u001b[1;32m    561\u001b[0m     \u001b[38;5;66;03m# for printing to stderr (doesn't stop the execution).\u001b[39;00m\n\u001b[1;32m    562\u001b[0m     tb \u001b[38;5;241m=\u001b[39m sys\u001b[38;5;241m.\u001b[39mexc_info()[\u001b[38;5;241m2\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:641\u001b[0m, in \u001b[0;36mDataIter._next_wrapper.<locals>.<lambda>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    638\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_data_ref \u001b[38;5;241m=\u001b[39m ref\n\u001b[1;32m    640\u001b[0m \u001b[38;5;66;03m# pylint: disable=not-callable\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_handle_exception(\u001b[38;5;28;01mlambda\u001b[39;00m: \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnext\u001b[49m\u001b[43m(\u001b[49m\u001b[43minput_data\u001b[49m\u001b[43m)\u001b[49m, \u001b[38;5;241m0\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/data.py:1280\u001b[0m, in \u001b[0;36mSingleBatchInternalIter.next\u001b[0;34m(self, input_data)\u001b[0m\n\u001b[1;32m   1278\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m   1279\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mit \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m-> 1280\u001b[0m \u001b[43minput_data\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1281\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;241m1\u001b[39m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:730\u001b[0m, in \u001b[0;36mrequire_keyword_args.<locals>.throw_if.<locals>.inner_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    728\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m k, arg \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(sig\u001b[38;5;241m.\u001b[39mparameters, args):\n\u001b[1;32m    729\u001b[0m     kwargs[k] \u001b[38;5;241m=\u001b[39m arg\n\u001b[0;32m--> 730\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:624\u001b[0m, in \u001b[0;36mDataIter._next_wrapper.<locals>.input_data\u001b[0;34m(data, feature_names, feature_types, **kwargs)\u001b[0m\n\u001b[1;32m    622\u001b[0m     new, cat_codes, feature_names, feature_types \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_temporary_data\n\u001b[1;32m    623\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 624\u001b[0m     new, cat_codes, feature_names, feature_types \u001b[38;5;241m=\u001b[39m \u001b[43m_proxy_transform\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    625\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    626\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfeature_names\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    627\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfeature_types\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    628\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_enable_categorical\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    629\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    630\u001b[0m \u001b[38;5;66;03m# Stage the data, meta info are copied inside C++ MetaInfo.\u001b[39;00m\n\u001b[1;32m    631\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_temporary_data \u001b[38;5;241m=\u001b[39m (new, cat_codes, feature_names, feature_types)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/data.py:1315\u001b[0m, in \u001b[0;36m_proxy_transform\u001b[0;34m(data, feature_names, feature_types, enable_categorical)\u001b[0m\n\u001b[1;32m   1313\u001b[0m     data \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame(data)\n\u001b[1;32m   1314\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m _is_pandas_df(data):\n\u001b[0;32m-> 1315\u001b[0m     arr, feature_names, feature_types \u001b[38;5;241m=\u001b[39m \u001b[43m_transform_pandas_df\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1316\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43menable_categorical\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfeature_names\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfeature_types\u001b[49m\n\u001b[1;32m   1317\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1318\u001b[0m     arr, _ \u001b[38;5;241m=\u001b[39m _ensure_np_dtype(arr, arr\u001b[38;5;241m.\u001b[39mdtype)\n\u001b[1;32m   1319\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m arr, \u001b[38;5;28;01mNone\u001b[39;00m, feature_names, feature_types\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/data.py:490\u001b[0m, in \u001b[0;36m_transform_pandas_df\u001b[0;34m(data, enable_categorical, feature_names, feature_types, meta, meta_type)\u001b[0m\n\u001b[1;32m    483\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m dtype \u001b[38;5;129;01min\u001b[39;00m data\u001b[38;5;241m.\u001b[39mdtypes:\n\u001b[1;32m    484\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\n\u001b[1;32m    485\u001b[0m         (dtype\u001b[38;5;241m.\u001b[39mname \u001b[38;5;129;01min\u001b[39;00m _pandas_dtype_mapper)\n\u001b[1;32m    486\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m is_pd_sparse_dtype(dtype)\n\u001b[1;32m    487\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m (is_pd_cat_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m enable_categorical)\n\u001b[1;32m    488\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m is_pa_ext_dtype(dtype)\n\u001b[1;32m    489\u001b[0m     ):\n\u001b[0;32m--> 490\u001b[0m         \u001b[43m_invalid_dataframe_dtype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    491\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_pa_ext_dtype(dtype):\n\u001b[1;32m    492\u001b[0m         pyarrow_extension \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/data.py:308\u001b[0m, in \u001b[0;36m_invalid_dataframe_dtype\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    306\u001b[0m type_err \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDataFrame.dtypes for data must be int, float, bool or category.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    307\u001b[0m msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\"\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtype_err\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m_ENABLE_CAT_ERR\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{\u001b[39;00merr\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\"\"\u001b[39m\n\u001b[0;32m--> 308\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n","\u001b[0;31mValueError\u001b[0m: DataFrame.dtypes for data must be int, float, bool or category. When categorical type is supplied, The experimental DMatrix parameter`enable_categorical` must be set to `True`.  Invalid columns:접수연도: object, 자치구명: object, 건물용도: object"],"ename":"ValueError","evalue":"DataFrame.dtypes for data must be int, float, bool or category. When categorical type is supplied, The experimental DMatrix parameter`enable_categorical` must be set to `True`.  Invalid columns:접수연도: object, 자치구명: object, 건물용도: object","output_type":"error"}],"execution_count":63},{"cell_type":"code","source":"# 모델 불러오기\n1) \nwith open(\"xgboost_feature3 (1).pkl\", \"rb\") as file:\n    model = pickle.load(file)\n    \nresult  model.predict(X_test, y_test)\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"2) 컬럼 다 쓰고, null_check해서 빈거 평균 넣어주고, cv=5\nresult = regressor.predict(X_test, y_test)\n\n\n1) 80% =>  2) 85%","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\n\n# 계약일을 날짜 형식으로 변환 (예: 'YYYYMMDD' 형식으로 가정)\nX_train['계약일'] = pd.to_datetime(X_train['계약일'], format='%Y%m%d')\n\n# 계약일 열을 제외한 다른 열들만 float으로 변환\nnumeric_cols = [col for col in cols if col != '계약일' and col != '자치구명']  # 계약일과 자치구명을 제외한 열 리스트\nX_train.loc[:, numeric_cols] = X_train[numeric_cols].apply(lambda x: x.astype(float))\n\n# 집계 함수 적용 (숫자형 열에 대해서만)\nagg_result = X_train[numeric_cols].agg([\"mean\", \"max\", \"min\"])\n\n# 자치구명에 대한 집계 (고유값과 최빈값 출력)\narea_unique = X_train['자치구명'].unique()  # 고유값\narea_mode = X_train['자치구명'].mode().iloc[0]  # 최빈값 (최빈값이 여러 개일 수 있으므로 첫 번째 값을 선택)\n\n# 계약일에 대한 집계 함수 적용 (datetime 타입에서 min, max는 바로 사용 가능)\ncontract_date_agg = X_train['계약일'].agg([\"min\", \"max\"])\n\n# 계약일의 평균 계산 (datetime을 일수로 변환하여 평균 계산)\ncontract_date_mean = (X_train['계약일'] - X_train['계약일'].min()).dt.days.mean()\ncontract_date_mean = pd.to_datetime(contract_date_mean, unit='D', origin=X_train['계약일'].min())\n\n# 결과 출력\nprint(\"Aggregated data for numeric columns:\")\nprint(agg_result)\nprint(\"\\nAggregated data for 자치구명:\")\nprint(f\"Unique values: {area_unique}\")\nprint(f\"Mode (Most frequent): {area_mode}\")\nprint(\"\\nAggregated data for 계약일:\")\nprint(contract_date_agg)\nprint(\"\\nMean of 계약일:\")\nprint(contract_date_mean)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:48:21.797352Z","iopub.execute_input":"2024-11-12T05:48:21.797835Z","iopub.status.idle":"2024-11-12T05:48:21.907288Z","shell.execute_reply.started":"2024-11-12T05:48:21.797791Z","shell.execute_reply":"2024-11-12T05:48:21.906141Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pickle\nwith open(\"xgboost_feature3.pkl\", \"wb\") as f:\n    pickle.dump(regressor, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:40:29.376811Z","iopub.execute_input":"2024-11-12T05:40:29.377305Z","iopub.status.idle":"2024-11-12T05:40:29.416284Z","shell.execute_reply.started":"2024-11-12T05:40:29.377263Z","shell.execute_reply":"2024-11-12T05:40:29.414828Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}