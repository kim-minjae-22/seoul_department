{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9838723,"sourceType":"datasetVersion","datasetId":6035419}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기\n\n# 예: 집값 데이터셋 파일을 CSV로 불러오기\n# data = pd.read_csv('house_prices.csv')\n\n# 예제 데이터 생성\ndata = pd.read_csv('/kaggle/input/seoul-data-set/.csv', encoding='cp949', low_memory=False)\nprint(len(data))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:13:40.445389Z","iopub.execute_input":"2024-11-08T01:13:40.446555Z","iopub.status.idle":"2024-11-08T01:13:48.342695Z","shell.execute_reply.started":"2024-11-08T01:13:40.446495Z","shell.execute_reply":"2024-11-08T01:13:48.341512Z"}},"outputs":[{"name":"stdout","text":"1026032\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# 2. 특성과 타깃 변수 분리\ncols1 = ['건물면적(㎡)', '토지면적(㎡)', '건축년도','층','접수연도']\nX = data[cols1]\ncols2 = ['물건금액(만원)']\ny = data[cols2]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:15:08.742471Z","iopub.execute_input":"2024-11-08T01:15:08.743566Z","iopub.status.idle":"2024-11-08T01:15:08.770233Z","shell.execute_reply.started":"2024-11-08T01:15:08.743495Z","shell.execute_reply":"2024-11-08T01:15:08.769142Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# NaN 값을 가진 행의 인덱스 식별\nnan_indices = X[X.isna().any(axis=1)].index\n\n# X에서 NaN 값을 가진 행 제거\nX_cleaned = X.dropna()\n\n# y에서 동일한 인덱스의 행 제거\ny_cleaned = y.drop(nan_indices)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:15:11.113146Z","iopub.execute_input":"2024-11-08T01:15:11.113969Z","iopub.status.idle":"2024-11-08T01:15:11.423248Z","shell.execute_reply.started":"2024-11-08T01:15:11.113923Z","shell.execute_reply":"2024-11-08T01:15:11.422010Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"print(len(X_cleaned))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:15:26.000287Z","iopub.execute_input":"2024-11-08T01:15:26.000768Z","iopub.status.idle":"2024-11-08T01:15:26.006902Z","shell.execute_reply.started":"2024-11-08T01:15:26.000723Z","shell.execute_reply":"2024-11-08T01:15:26.005695Z"}},"outputs":[{"name":"stdout","text":"769937\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"y_cleaned","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:15:34.554785Z","iopub.execute_input":"2024-11-08T01:15:34.555204Z","iopub.status.idle":"2024-11-08T01:15:34.566794Z","shell.execute_reply.started":"2024-11-08T01:15:34.555165Z","shell.execute_reply":"2024-11-08T01:15:34.565597Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"         물건금액(만원)\n0           33500\n3           11000\n4           27250\n5           27050\n6           25650\n...           ...\n1026025     56730\n1026027     46500\n1026028     46500\n1026030     18000\n1026031     71000\n\n[769937 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>물건금액(만원)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>33500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27250</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>27050</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>25650</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1026025</th>\n      <td>56730</td>\n    </tr>\n    <tr>\n      <th>1026027</th>\n      <td>46500</td>\n    </tr>\n    <tr>\n      <th>1026028</th>\n      <td>46500</td>\n    </tr>\n    <tr>\n      <th>1026030</th>\n      <td>18000</td>\n    </tr>\n    <tr>\n      <th>1026031</th>\n      <td>71000</td>\n    </tr>\n  </tbody>\n</table>\n<p>769937 rows × 1 columns</p>\n</div>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X_cleaned, y_cleaned, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:18:31.845355Z","iopub.execute_input":"2024-11-08T01:18:31.846240Z","iopub.status.idle":"2024-11-08T01:18:31.978272Z","shell.execute_reply.started":"2024-11-08T01:18:31.846193Z","shell.execute_reply":"2024-11-08T01:18:31.977190Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"X_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:18:45.893734Z","iopub.execute_input":"2024-11-08T01:18:45.894181Z","iopub.status.idle":"2024-11-08T01:18:45.910210Z","shell.execute_reply.started":"2024-11-08T01:18:45.894140Z","shell.execute_reply":"2024-11-08T01:18:45.908966Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"        건물면적(㎡)  토지면적(㎡)    건축년도     층  접수연도\n939553    32.67    44.59  2004.0  11.0  2018\n85827     20.46    28.43  2008.0  12.0  2024\n277565    58.01     0.00  1990.0   2.0  2021\n545768    45.01    25.64  2013.0   5.0  2019\n745451    19.11    12.29  2012.0   3.0  2017","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>건물면적(㎡)</th>\n      <th>토지면적(㎡)</th>\n      <th>건축년도</th>\n      <th>층</th>\n      <th>접수연도</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>939553</th>\n      <td>32.67</td>\n      <td>44.59</td>\n      <td>2004.0</td>\n      <td>11.0</td>\n      <td>2018</td>\n    </tr>\n    <tr>\n      <th>85827</th>\n      <td>20.46</td>\n      <td>28.43</td>\n      <td>2008.0</td>\n      <td>12.0</td>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>277565</th>\n      <td>58.01</td>\n      <td>0.00</td>\n      <td>1990.0</td>\n      <td>2.0</td>\n      <td>2021</td>\n    </tr>\n    <tr>\n      <th>545768</th>\n      <td>45.01</td>\n      <td>25.64</td>\n      <td>2013.0</td>\n      <td>5.0</td>\n      <td>2019</td>\n    </tr>\n    <tr>\n      <th>745451</th>\n      <td>19.11</td>\n      <td>12.29</td>\n      <td>2012.0</td>\n      <td>3.0</td>\n      <td>2017</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"import pandas  as pd\nimport numpy   as np\nimport xgboost as xgb","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:19:21.507873Z","iopub.execute_input":"2024-11-08T01:19:21.508317Z","iopub.status.idle":"2024-11-08T01:19:21.697778Z","shell.execute_reply.started":"2024-11-08T01:19:21.508274Z","shell.execute_reply":"2024-11-08T01:19:21.696601Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(eval_metric='rmsle')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:19:23.512191Z","iopub.execute_input":"2024-11-08T01:19:23.512661Z","iopub.status.idle":"2024-11-08T01:19:23.518241Z","shell.execute_reply.started":"2024-11-08T01:19:23.512615Z","shell.execute_reply":"2024-11-08T01:19:23.516978Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"X_train['접수연도'] = X_train['접수연도'].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:21:41.653778Z","iopub.execute_input":"2024-11-08T01:21:41.654198Z","iopub.status.idle":"2024-11-08T01:21:41.661497Z","shell.execute_reply.started":"2024-11-08T01:21:41.654160Z","shell.execute_reply":"2024-11-08T01:21:41.660089Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# 필요한 열을 인코딩\nX_train['접수연도'] = LabelEncoder().fit_transform(X_train['접수연도'])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:21:53.472747Z","iopub.execute_input":"2024-11-08T01:21:53.473185Z","iopub.status.idle":"2024-11-08T01:21:53.646197Z","shell.execute_reply.started":"2024-11-08T01:21:53.473146Z","shell.execute_reply":"2024-11-08T01:21:53.644878Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"print(X_train.dtypes)  # object 타입 열을 모두 확인하기\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:21:08.259847Z","iopub.execute_input":"2024-11-08T01:21:08.260341Z","iopub.status.idle":"2024-11-08T01:21:08.267663Z","shell.execute_reply.started":"2024-11-08T01:21:08.260279Z","shell.execute_reply":"2024-11-08T01:21:08.266266Z"}},"outputs":[{"name":"stdout","text":"건물면적(㎡)     float64\n토지면적(㎡)     float64\n건축년도        float64\n층           float64\n접수연도       category\ndtype: object\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\n# set up our search grid\nparam_grid = {\"max_depth\":    [4, 5, 6],\n              \"n_estimators\": [500, 600, 700],\n              \"learning_rate\": [0.01, 0.015]}\n\n# try out every combination of the above values\nsearch = GridSearchCV(regressor, param_grid, cv=5).fit(X_train, y_train)\n\nprint(\"The best hyperparameters are \",search.best_params_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:22:01.757303Z","iopub.execute_input":"2024-11-08T01:22:01.757794Z","iopub.status.idle":"2024-11-08T01:36:17.642942Z","shell.execute_reply.started":"2024-11-08T01:22:01.757751Z","shell.execute_reply":"2024-11-08T01:36:17.642057Z"}},"outputs":[{"name":"stdout","text":"The best hyperparameters are  {'learning_rate': 0.015, 'max_depth': 6, 'n_estimators': 700}\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(learning_rate = search.best_params_[\"learning_rate\"],\n                           n_estimators  = search.best_params_[\"n_estimators\"],\n                           max_depth     = search.best_params_[\"max_depth\"],\n                           eval_metric='rmsle')\n\nregressor.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:37:09.150289Z","iopub.execute_input":"2024-11-08T01:37:09.150739Z","iopub.status.idle":"2024-11-08T01:37:22.094932Z","shell.execute_reply.started":"2024-11-08T01:37:09.150697Z","shell.execute_reply":"2024-11-08T01:37:22.093659Z"}},"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric='rmsle', feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=6, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=700, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=6, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=700, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=6, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=700, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"import pickle\nwith open(\"xgboost_feature_full.pkl\", \"wb\") as f:\n    pickle.dump(regressor, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:37:33.943021Z","iopub.execute_input":"2024-11-08T01:37:33.943475Z","iopub.status.idle":"2024-11-08T01:37:33.971426Z","shell.execute_reply.started":"2024-11-08T01:37:33.943432Z","shell.execute_reply":"2024-11-08T01:37:33.970409Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:40:00.803796Z","iopub.execute_input":"2024-11-08T01:40:00.804235Z","iopub.status.idle":"2024-11-08T01:40:00.811714Z","shell.execute_reply.started":"2024-11-08T01:40:00.804197Z","shell.execute_reply":"2024-11-08T01:40:00.810619Z"}},"outputs":[{"name":"stdout","text":"건물면적(㎡)     float64\n토지면적(㎡)     float64\n건축년도        float64\n층           float64\n접수연도       category\ndtype: object\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"X_test['접수연도'] = X_test['접수연도'].astype('category')\npredictions = regressor.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:40:31.644610Z","iopub.execute_input":"2024-11-08T01:40:31.645622Z","iopub.status.idle":"2024-11-08T01:40:32.670722Z","shell.execute_reply.started":"2024-11-08T01:40:31.645559Z","shell.execute_reply":"2024-11-08T01:40:32.669766Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"import matplotlib.font_manager as fm\n', '.join(sorted([font.name for font in fm.fontManager.ttflist]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:50:45.346646Z","iopub.execute_input":"2024-11-08T01:50:45.347663Z","iopub.status.idle":"2024-11-08T01:50:45.355727Z","shell.execute_reply.started":"2024-11-08T01:50:45.347615Z","shell.execute_reply":"2024-11-08T01:50:45.354492Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"'DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans Display, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif Display, Latin Modern Math, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono Caps, Latin Modern Mono Caps, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light Cond, Latin Modern Mono Light Cond, Latin Modern Mono Prop, Latin Modern Mono Prop, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Slanted, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman Caps, Latin Modern Roman Caps, Latin Modern Roman Demi, Latin Modern Roman Demi, Latin Modern Roman Dunhill, Latin Modern Roman Dunhill, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Unslanted, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans Demi Cond, Latin Modern Sans Demi Cond, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, STIXGeneral, STIXGeneral, STIXGeneral, STIXGeneral, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXSizeFiveSym, STIXSizeFourSym, STIXSizeFourSym, STIXSizeOneSym, STIXSizeOneSym, STIXSizeThreeSym, STIXSizeThreeSym, STIXSizeTwoSym, STIXSizeTwoSym, cmb10, cmex10, cmmi10, cmr10, cmss10, cmsy10, cmtt10'"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"fontpaths = \"/kaggle/input/nanumfontsetup-ttf-square\"\nfont_list = fm.findSystemFonts(fontpaths = fontpaths, fontext='ttf')\nfor font_file in font_list:\n    fm.fontManager.addfont(font_file)\nfm._load_fontmanager(try_read_cache=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:53:41.972276Z","iopub.execute_input":"2024-11-08T01:53:41.972782Z","iopub.status.idle":"2024-11-08T01:53:42.582484Z","shell.execute_reply.started":"2024-11-08T01:53:41.972736Z","shell.execute_reply":"2024-11-08T01:53:42.581328Z"}},"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"<matplotlib.font_manager.FontManager at 0x7a3ea684fee0>"},"metadata":{}}],"execution_count":53},{"cell_type":"code","source":"', '.join(sorted([font.name for font in fm.fontManager.ttflist]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:53:44.081670Z","iopub.execute_input":"2024-11-08T01:53:44.082106Z","iopub.status.idle":"2024-11-08T01:53:44.094188Z","shell.execute_reply.started":"2024-11-08T01:53:44.082065Z","shell.execute_reply":"2024-11-08T01:53:44.092740Z"}},"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"'DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans Display, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif Display, Latin Modern Math, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono Caps, Latin Modern Mono Caps, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light Cond, Latin Modern Mono Light Cond, Latin Modern Mono Prop, Latin Modern Mono Prop, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Slanted, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman Caps, Latin Modern Roman Caps, Latin Modern Roman Demi, Latin Modern Roman Demi, Latin Modern Roman Dunhill, Latin Modern Roman Dunhill, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Unslanted, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans Demi Cond, Latin Modern Sans Demi Cond, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, NanumSquare, NanumSquare, NanumSquare, NanumSquare, NanumSquare_ac, NanumSquare_ac, NanumSquare_ac, NanumSquare_ac, STIXGeneral, STIXGeneral, STIXGeneral, STIXGeneral, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXSizeFiveSym, STIXSizeFourSym, STIXSizeFourSym, STIXSizeOneSym, STIXSizeOneSym, STIXSizeThreeSym, STIXSizeThreeSym, STIXSizeTwoSym, STIXSizeTwoSym, cmb10, cmex10, cmmi10, cmr10, cmss10, cmsy10, cmtt10'"},"metadata":{}}],"execution_count":54},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nplt.rc('font', family='NanumSquare_ac')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:53:44.926964Z","iopub.execute_input":"2024-11-08T01:53:44.927888Z","iopub.status.idle":"2024-11-08T01:53:44.933731Z","shell.execute_reply.started":"2024-11-08T01:53:44.927830Z","shell.execute_reply":"2024-11-08T01:53:44.932370Z"}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"import matplotlib.pyplot as plt \nplt.plot([1, 2, 3])\nplt.title(\"한글\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:53:45.848109Z","iopub.execute_input":"2024-11-08T01:53:45.848587Z","iopub.status.idle":"2024-11-08T01:53:46.117613Z","shell.execute_reply.started":"2024-11-08T01:53:45.848514Z","shell.execute_reply":"2024-11-08T01:53:46.116444Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":56},{"cell_type":"code","source":"from xgboost import plot_importance\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\n# 한글 폰트 경로 지정\nfont_path = '/kaggle/input/nanumfontsetup-ttf-square/NanumSquareB.ttf'\nfont_prop = FontProperties(fname=font_path)\n\n# 스타일 및 폰트 크기 설정\nplt.style.use('fivethirtyeight')\nplt.rcParams.update({'font.size': 16})\n\n# 플롯 생성 및 한글 폰트 적용\nfig, ax = plt.subplots(figsize=(12, 6))\nplot_importance(regressor, max_num_features=8, ax=ax)\n\n# x축과 y축 폰트 설정\nfor label in ax.get_yticklabels():\n    label.set_fontproperties(font_prop)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:55:08.137158Z","iopub.execute_input":"2024-11-08T01:55:08.137637Z","iopub.status.idle":"2024-11-08T01:55:08.475122Z","shell.execute_reply.started":"2024-11-08T01:55:08.137593Z","shell.execute_reply":"2024-11-08T01:55:08.473937Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":59},{"cell_type":"code","source":"# Use just 3 columns => demo in streamlit app by getting only 3 inputs from users\ncols = [\"건축년도\", \"건물면적(㎡)\", \"접수연도\"]\nX_train = X_train[cols]\nX_test = X_test[cols]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T02:07:48.484814Z","iopub.execute_input":"2024-11-08T02:07:48.485322Z","iopub.status.idle":"2024-11-08T02:07:48.494923Z","shell.execute_reply.started":"2024-11-08T02:07:48.485280Z","shell.execute_reply":"2024-11-08T02:07:48.493603Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"X_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T02:07:52.966975Z","iopub.execute_input":"2024-11-08T02:07:52.967439Z","iopub.status.idle":"2024-11-08T02:07:52.981996Z","shell.execute_reply.started":"2024-11-08T02:07:52.967395Z","shell.execute_reply":"2024-11-08T02:07:52.980760Z"}},"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"          건축년도  건물면적(㎡) 접수연도\n939553  2004.0    32.67    2\n85827   2008.0    20.46    8\n277565  1990.0    58.01    5\n545768  2013.0    45.01    3\n745451  2012.0    19.11    1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>건축년도</th>\n      <th>건물면적(㎡)</th>\n      <th>접수연도</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>939553</th>\n      <td>2004.0</td>\n      <td>32.67</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>85827</th>\n      <td>2008.0</td>\n      <td>20.46</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>277565</th>\n      <td>1990.0</td>\n      <td>58.01</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>545768</th>\n      <td>2013.0</td>\n      <td>45.01</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>745451</th>\n      <td>2012.0</td>\n      <td>19.11</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":61},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(eval_metric='rmsle')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T02:08:03.642882Z","iopub.execute_input":"2024-11-08T02:08:03.643791Z","iopub.status.idle":"2024-11-08T02:08:03.648757Z","shell.execute_reply.started":"2024-11-08T02:08:03.643748Z","shell.execute_reply":"2024-11-08T02:08:03.647592Z"}},"outputs":[],"execution_count":62},{"cell_type":"code","source":"import xgboost as xgb\nfrom sklearn.model_selection import ParameterGrid\n\n# 직접 파라미터 조합을 설정\nparam_grid = {\"max_depth\":    [4, 5, 6],\n              \"n_estimators\": [500, 600, 700],\n              \"learning_rate\": [0.01, 0.015]}\n\nbest_params = None\nbest_score = float('-inf')\n\nfor params in ParameterGrid(param_grid):\n    regressor = xgb.XGBRegressor(**params, enable_categorical=True)\n    regressor.fit(X_train, y_train)\n    score = regressor.score(X_test, y_test)  # 평가 지표 사용 (예: R^2)\n    if score > best_score:\n        best_score = score\n        best_params = params\n\nprint(\"The best hyperparameters are \", best_params)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T02:11:17.664351Z","iopub.execute_input":"2024-11-08T02:11:17.664834Z","iopub.status.idle":"2024-11-08T02:15:42.343994Z","shell.execute_reply.started":"2024-11-08T02:11:17.664791Z","shell.execute_reply":"2024-11-08T02:15:42.343039Z"}},"outputs":[{"name":"stdout","text":"The best hyperparameters are  {'learning_rate': 0.015, 'max_depth': 6, 'n_estimators': 700}\n","output_type":"stream"}],"execution_count":65},{"cell_type":"code","source":"# 'cols' 리스트에 있는 열을 float 타입으로 변환\nX_train[cols] = X_train[cols].apply(lambda x: x.astype(float))\n\n# 집계 함수 적용\nX_train[cols].agg([\"mean\", \"max\", \"min\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T02:22:07.884420Z","iopub.execute_input":"2024-11-08T02:22:07.885213Z","iopub.status.idle":"2024-11-08T02:22:07.933994Z","shell.execute_reply.started":"2024-11-08T02:22:07.885168Z","shell.execute_reply":"2024-11-08T02:22:07.932815Z"}},"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"             건축년도     건물면적(㎡)      접수연도\nmean  1961.695822   58.146089  3.947668\nmax   2024.000000  579.270000  8.000000\nmin      0.000000    6.280000  0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>건축년도</th>\n      <th>건물면적(㎡)</th>\n      <th>접수연도</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mean</th>\n      <td>1961.695822</td>\n      <td>58.146089</td>\n      <td>3.947668</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2024.000000</td>\n      <td>579.270000</td>\n      <td>8.000000</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>6.280000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":67},{"cell_type":"code","source":"# cols = [\"LotFrontage\", \"LotArea\", \"GrLivArea\"]\nunseen_data = [[70, 10516, 1515], [313, 215245, 5642], [21, 1300, 334]]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T02:23:44.394272Z","iopub.execute_input":"2024-11-08T02:23:44.395252Z","iopub.status.idle":"2024-11-08T02:23:44.400245Z","shell.execute_reply.started":"2024-11-08T02:23:44.395208Z","shell.execute_reply":"2024-11-08T02:23:44.399041Z"}},"outputs":[],"execution_count":68},{"cell_type":"code","source":"result = regressor.predict(unseen_data)\nresult","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T02:23:49.243724Z","iopub.execute_input":"2024-11-08T02:23:49.244949Z","iopub.status.idle":"2024-11-08T02:23:49.256763Z","shell.execute_reply.started":"2024-11-08T02:23:49.244897Z","shell.execute_reply":"2024-11-08T02:23:49.255651Z"}},"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"array([1023534.2, 1023534.2, 1023534.2], dtype=float32)"},"metadata":{}}],"execution_count":69},{"cell_type":"code","source":"import pickle\nwith open(\"xgboost_feature3.pkl\", \"wb\") as f:\n    pickle.dump(regressor, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T02:24:09.451362Z","iopub.execute_input":"2024-11-08T02:24:09.451833Z","iopub.status.idle":"2024-11-08T02:24:09.478960Z","shell.execute_reply.started":"2024-11-08T02:24:09.451789Z","shell.execute_reply":"2024-11-08T02:24:09.477718Z"}},"outputs":[],"execution_count":70},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}