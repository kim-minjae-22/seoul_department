{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9838723,"sourceType":"datasetVersion","datasetId":6035419},{"sourceId":9839034,"sourceType":"datasetVersion","datasetId":6035639}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기\n\n# 예: 집값 데이터셋 파일을 CSV로 불러오기\n# data = pd.read_csv('house_prices.csv')\n\n# 예제 데이터 생성\ndata = pd.read_csv('/kaggle/input/seoul-data-set/.csv', encoding='cp949', low_memory=False)\nprint(len(data))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T06:52:28.443269Z","iopub.execute_input":"2024-11-08T06:52:28.443788Z","iopub.status.idle":"2024-11-08T06:52:33.593898Z","shell.execute_reply.started":"2024-11-08T06:52:28.443724Z","shell.execute_reply":"2024-11-08T06:52:33.592796Z"}},"outputs":[{"name":"stdout","text":"1026032\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"# 2. 특성과 타깃 변수 분리\ncols1 = ['건물면적(㎡)', '토지면적(㎡)', '건축년도','층','접수연도','자치구명']\nX = data[cols1]\ncols2 = ['물건금액(만원)']\ny = data[cols2]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:47:22.308851Z","iopub.execute_input":"2024-11-08T07:47:22.309888Z","iopub.status.idle":"2024-11-08T07:47:22.366151Z","shell.execute_reply.started":"2024-11-08T07:47:22.309815Z","shell.execute_reply":"2024-11-08T07:47:22.364911Z"}},"outputs":[],"execution_count":71},{"cell_type":"code","source":"# NaN 값을 가진 행의 인덱스 식별\nnan_indices = X[X.isna().any(axis=1)].index\n\n# X에서 NaN 값을 가진 행 제거\nX_cleaned = X.dropna()\n\n# y에서 동일한 인덱스의 행 제거\ny_cleaned = y.drop(nan_indices)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:47:23.611665Z","iopub.execute_input":"2024-11-08T07:47:23.612128Z","iopub.status.idle":"2024-11-08T07:47:23.932946Z","shell.execute_reply.started":"2024-11-08T07:47:23.612088Z","shell.execute_reply":"2024-11-08T07:47:23.931668Z"}},"outputs":[],"execution_count":72},{"cell_type":"code","source":"print(len(X_cleaned))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:47:24.749382Z","iopub.execute_input":"2024-11-08T07:47:24.750288Z","iopub.status.idle":"2024-11-08T07:47:24.756123Z","shell.execute_reply.started":"2024-11-08T07:47:24.750239Z","shell.execute_reply":"2024-11-08T07:47:24.754887Z"}},"outputs":[{"name":"stdout","text":"769936\n","output_type":"stream"}],"execution_count":73},{"cell_type":"code","source":"y_cleaned","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:47:25.663256Z","iopub.execute_input":"2024-11-08T07:47:25.664473Z","iopub.status.idle":"2024-11-08T07:47:25.676207Z","shell.execute_reply.started":"2024-11-08T07:47:25.664421Z","shell.execute_reply":"2024-11-08T07:47:25.674949Z"}},"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"         물건금액(만원)\n0           33500\n3           11000\n4           27250\n5           27050\n6           25650\n...           ...\n1026025     56730\n1026027     46500\n1026028     46500\n1026030     18000\n1026031     71000\n\n[769936 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>물건금액(만원)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>33500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27250</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>27050</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>25650</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1026025</th>\n      <td>56730</td>\n    </tr>\n    <tr>\n      <th>1026027</th>\n      <td>46500</td>\n    </tr>\n    <tr>\n      <th>1026028</th>\n      <td>46500</td>\n    </tr>\n    <tr>\n      <th>1026030</th>\n      <td>18000</td>\n    </tr>\n    <tr>\n      <th>1026031</th>\n      <td>71000</td>\n    </tr>\n  </tbody>\n</table>\n<p>769936 rows × 1 columns</p>\n</div>"},"metadata":{}}],"execution_count":74},{"cell_type":"code","source":"# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X_cleaned, y_cleaned, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:47:26.780009Z","iopub.execute_input":"2024-11-08T07:47:26.780455Z","iopub.status.idle":"2024-11-08T07:47:27.043848Z","shell.execute_reply.started":"2024-11-08T07:47:26.780413Z","shell.execute_reply":"2024-11-08T07:47:27.042729Z"}},"outputs":[],"execution_count":75},{"cell_type":"code","source":"X_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:47:28.176010Z","iopub.execute_input":"2024-11-08T07:47:28.176461Z","iopub.status.idle":"2024-11-08T07:47:28.192012Z","shell.execute_reply.started":"2024-11-08T07:47:28.176420Z","shell.execute_reply":"2024-11-08T07:47:28.190814Z"}},"outputs":[{"execution_count":76,"output_type":"execute_result","data":{"text/plain":"        건물면적(㎡)  토지면적(㎡)    건축년도     층  접수연도 자치구명\n939553    32.67    44.59  2004.0  11.0  2018  강동구\n85827     20.46    28.43  2008.0  12.0  2024  서초구\n277566    43.86    19.40  1996.0  -1.0  2021  노원구\n637104    51.84    27.06  1995.0   2.0  2019  양천구\n906113   114.56     0.00  2006.0   4.0  2018  성북구","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>건물면적(㎡)</th>\n      <th>토지면적(㎡)</th>\n      <th>건축년도</th>\n      <th>층</th>\n      <th>접수연도</th>\n      <th>자치구명</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>939553</th>\n      <td>32.67</td>\n      <td>44.59</td>\n      <td>2004.0</td>\n      <td>11.0</td>\n      <td>2018</td>\n      <td>강동구</td>\n    </tr>\n    <tr>\n      <th>85827</th>\n      <td>20.46</td>\n      <td>28.43</td>\n      <td>2008.0</td>\n      <td>12.0</td>\n      <td>2024</td>\n      <td>서초구</td>\n    </tr>\n    <tr>\n      <th>277566</th>\n      <td>43.86</td>\n      <td>19.40</td>\n      <td>1996.0</td>\n      <td>-1.0</td>\n      <td>2021</td>\n      <td>노원구</td>\n    </tr>\n    <tr>\n      <th>637104</th>\n      <td>51.84</td>\n      <td>27.06</td>\n      <td>1995.0</td>\n      <td>2.0</td>\n      <td>2019</td>\n      <td>양천구</td>\n    </tr>\n    <tr>\n      <th>906113</th>\n      <td>114.56</td>\n      <td>0.00</td>\n      <td>2006.0</td>\n      <td>4.0</td>\n      <td>2018</td>\n      <td>성북구</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":76},{"cell_type":"code","source":"import pandas  as pd\nimport numpy   as np\nimport xgboost as xgb","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:47:34.974706Z","iopub.execute_input":"2024-11-08T07:47:34.975197Z","iopub.status.idle":"2024-11-08T07:47:34.980512Z","shell.execute_reply.started":"2024-11-08T07:47:34.975152Z","shell.execute_reply":"2024-11-08T07:47:34.979083Z"}},"outputs":[],"execution_count":78},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(eval_metric='rmsle')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:47:35.739555Z","iopub.execute_input":"2024-11-08T07:47:35.739998Z","iopub.status.idle":"2024-11-08T07:47:35.746739Z","shell.execute_reply.started":"2024-11-08T07:47:35.739958Z","shell.execute_reply":"2024-11-08T07:47:35.745201Z"}},"outputs":[],"execution_count":79},{"cell_type":"code","source":"X_train['접수연도'] = X_train['접수연도'].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:47:36.700022Z","iopub.execute_input":"2024-11-08T07:47:36.701755Z","iopub.status.idle":"2024-11-08T07:47:36.747464Z","shell.execute_reply.started":"2024-11-08T07:47:36.701687Z","shell.execute_reply":"2024-11-08T07:47:36.746035Z"}},"outputs":[],"execution_count":80},{"cell_type":"code","source":"X_train['자치구명'] = X_train['자치구명'].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:48:01.029738Z","iopub.execute_input":"2024-11-08T07:48:01.030230Z","iopub.status.idle":"2024-11-08T07:48:01.080928Z","shell.execute_reply.started":"2024-11-08T07:48:01.030186Z","shell.execute_reply":"2024-11-08T07:48:01.079575Z"}},"outputs":[],"execution_count":83},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# 필요한 열을 인코딩\nX_train['접수연도'] = LabelEncoder().fit_transform(X_train['접수연도'])\nX_train['자치구명'] = LabelEncoder().fit_transform(X_train['자치구명'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:48:24.221608Z","iopub.execute_input":"2024-11-08T07:48:24.222063Z","iopub.status.idle":"2024-11-08T07:48:24.391926Z","shell.execute_reply.started":"2024-11-08T07:48:24.222019Z","shell.execute_reply":"2024-11-08T07:48:24.390769Z"}},"outputs":[],"execution_count":84},{"cell_type":"code","source":"print(X_train.dtypes)  # object 타입 열을 모두 확인하기","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:48:25.349785Z","iopub.execute_input":"2024-11-08T07:48:25.350224Z","iopub.status.idle":"2024-11-08T07:48:25.357208Z","shell.execute_reply.started":"2024-11-08T07:48:25.350184Z","shell.execute_reply":"2024-11-08T07:48:25.355938Z"}},"outputs":[{"name":"stdout","text":"건물면적(㎡)    float64\n토지면적(㎡)    float64\n건축년도       float64\n층          float64\n접수연도         int64\n자치구명         int64\ndtype: object\n","output_type":"stream"}],"execution_count":85},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\n# set up our search grid\nparam_grid = {\"max_depth\":    [4, 5, 6],\n              \"n_estimators\": [500, 600, 700],\n              \"learning_rate\": [0.01, 0.015]}\n\n# try out every combination of the above values\nsearch = GridSearchCV(regressor, param_grid, cv=5).fit(X_train, y_train)\n\nprint(\"The best hyperparameters are \",search.best_params_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:48:31.695407Z","iopub.execute_input":"2024-11-08T07:48:31.695835Z","iopub.status.idle":"2024-11-08T08:06:05.210985Z","shell.execute_reply.started":"2024-11-08T07:48:31.695794Z","shell.execute_reply":"2024-11-08T08:06:05.209518Z"}},"outputs":[{"name":"stdout","text":"The best hyperparameters are  {'learning_rate': 0.015, 'max_depth': 6, 'n_estimators': 700}\n","output_type":"stream"}],"execution_count":86},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(learning_rate = search.best_params_[\"learning_rate\"],\n                           n_estimators  = search.best_params_[\"n_estimators\"],\n                           max_depth     = search.best_params_[\"max_depth\"],\n                           eval_metric='rmsle')\n\nregressor.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:06:14.262934Z","iopub.execute_input":"2024-11-08T08:06:14.264429Z","iopub.status.idle":"2024-11-08T08:06:34.398357Z","shell.execute_reply.started":"2024-11-08T08:06:14.264342Z","shell.execute_reply":"2024-11-08T08:06:34.397055Z"}},"outputs":[{"execution_count":87,"output_type":"execute_result","data":{"text/plain":"XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric='rmsle', feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=6, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=700, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=6, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=700, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=6, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=700, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":87},{"cell_type":"code","source":"import pickle\nwith open(\"xgboost_feature_full.pkl\", \"wb\") as f:\n    pickle.dump(regressor, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:06:37.947394Z","iopub.execute_input":"2024-11-08T08:06:37.947828Z","iopub.status.idle":"2024-11-08T08:06:37.976402Z","shell.execute_reply.started":"2024-11-08T08:06:37.947788Z","shell.execute_reply":"2024-11-08T08:06:37.975099Z"}},"outputs":[],"execution_count":88},{"cell_type":"code","source":"X_test['접수연도'] = X_test['접수연도'].astype('category')\npredictions = regressor.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:06:38.799395Z","iopub.execute_input":"2024-11-08T08:06:38.799853Z","iopub.status.idle":"2024-11-08T08:06:39.106947Z","shell.execute_reply.started":"2024-11-08T08:06:38.799810Z","shell.execute_reply":"2024-11-08T08:06:39.104993Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[89], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m X_test[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m접수연도\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m X_test[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m접수연도\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcategory\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 2\u001b[0m predictions \u001b[38;5;241m=\u001b[39m \u001b[43mregressor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_test\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:1168\u001b[0m, in \u001b[0;36mXGBModel.predict\u001b[0;34m(self, X, output_margin, validate_features, base_margin, iteration_range)\u001b[0m\n\u001b[1;32m   1166\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_can_use_inplace_predict():\n\u001b[1;32m   1167\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 1168\u001b[0m         predts \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_booster\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minplace_predict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1169\u001b[0m \u001b[43m            \u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1170\u001b[0m \u001b[43m            \u001b[49m\u001b[43miteration_range\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43miteration_range\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1171\u001b[0m \u001b[43m            \u001b[49m\u001b[43mpredict_type\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mmargin\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43moutput_margin\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mvalue\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1172\u001b[0m \u001b[43m            \u001b[49m\u001b[43mmissing\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmissing\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1173\u001b[0m \u001b[43m            \u001b[49m\u001b[43mbase_margin\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbase_margin\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1174\u001b[0m \u001b[43m            \u001b[49m\u001b[43mvalidate_features\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mvalidate_features\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1175\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1176\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m _is_cupy_array(predts):\n\u001b[1;32m   1177\u001b[0m             \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mcupy\u001b[39;00m  \u001b[38;5;66;03m# pylint: disable=import-error\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/core.py:2416\u001b[0m, in \u001b[0;36mBooster.inplace_predict\u001b[0;34m(self, data, iteration_range, predict_type, missing, validate_features, base_margin, strict_shape)\u001b[0m\n\u001b[1;32m   2414\u001b[0m     data \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mDataFrame(data)\n\u001b[1;32m   2415\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m _is_pandas_df(data):\n\u001b[0;32m-> 2416\u001b[0m     data, fns, _ \u001b[38;5;241m=\u001b[39m \u001b[43m_transform_pandas_df\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43menable_categorical\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2417\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m validate_features:\n\u001b[1;32m   2418\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_features(fns)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/data.py:490\u001b[0m, in \u001b[0;36m_transform_pandas_df\u001b[0;34m(data, enable_categorical, feature_names, feature_types, meta, meta_type)\u001b[0m\n\u001b[1;32m    483\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m dtype \u001b[38;5;129;01min\u001b[39;00m data\u001b[38;5;241m.\u001b[39mdtypes:\n\u001b[1;32m    484\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\n\u001b[1;32m    485\u001b[0m         (dtype\u001b[38;5;241m.\u001b[39mname \u001b[38;5;129;01min\u001b[39;00m _pandas_dtype_mapper)\n\u001b[1;32m    486\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m is_pd_sparse_dtype(dtype)\n\u001b[1;32m    487\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m (is_pd_cat_dtype(dtype) \u001b[38;5;129;01mand\u001b[39;00m enable_categorical)\n\u001b[1;32m    488\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m is_pa_ext_dtype(dtype)\n\u001b[1;32m    489\u001b[0m     ):\n\u001b[0;32m--> 490\u001b[0m         \u001b[43m_invalid_dataframe_dtype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    491\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_pa_ext_dtype(dtype):\n\u001b[1;32m    492\u001b[0m         pyarrow_extension \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/xgboost/data.py:308\u001b[0m, in \u001b[0;36m_invalid_dataframe_dtype\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    306\u001b[0m type_err \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDataFrame.dtypes for data must be int, float, bool or category.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    307\u001b[0m msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\"\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtype_err\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m_ENABLE_CAT_ERR\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{\u001b[39;00merr\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\"\"\u001b[39m\n\u001b[0;32m--> 308\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n","\u001b[0;31mValueError\u001b[0m: DataFrame.dtypes for data must be int, float, bool or category. When categorical type is supplied, The experimental DMatrix parameter`enable_categorical` must be set to `True`.  Invalid columns:접수연도: category, 자치구명: object"],"ename":"ValueError","evalue":"DataFrame.dtypes for data must be int, float, bool or category. When categorical type is supplied, The experimental DMatrix parameter`enable_categorical` must be set to `True`.  Invalid columns:접수연도: category, 자치구명: object","output_type":"error"}],"execution_count":89},{"cell_type":"code","source":"import matplotlib.font_manager as fm\n', '.join(sorted([font.name for font in fm.fontManager.ttflist]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T01:50:45.346646Z","iopub.execute_input":"2024-11-08T01:50:45.347663Z","iopub.status.idle":"2024-11-08T01:50:45.355727Z","shell.execute_reply.started":"2024-11-08T01:50:45.347615Z","shell.execute_reply":"2024-11-08T01:50:45.354492Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"'DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans Display, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif Display, Latin Modern Math, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono Caps, Latin Modern Mono Caps, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light Cond, Latin Modern Mono Light Cond, Latin Modern Mono Prop, Latin Modern Mono Prop, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Slanted, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman Caps, Latin Modern Roman Caps, Latin Modern Roman Demi, Latin Modern Roman Demi, Latin Modern Roman Dunhill, Latin Modern Roman Dunhill, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Unslanted, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans Demi Cond, Latin Modern Sans Demi Cond, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, STIXGeneral, STIXGeneral, STIXGeneral, STIXGeneral, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXSizeFiveSym, STIXSizeFourSym, STIXSizeFourSym, STIXSizeOneSym, STIXSizeOneSym, STIXSizeThreeSym, STIXSizeThreeSym, STIXSizeTwoSym, STIXSizeTwoSym, cmb10, cmex10, cmmi10, cmr10, cmss10, cmsy10, cmtt10'"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"from xgboost import plot_importance\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\n# 한글 폰트 경로 지정\nfont_path = '/kaggle/input/nanumfontsetup-ttf-square/NanumSquareB.ttf'\nfont_prop = FontProperties(fname=font_path)\n\n# 스타일 및 폰트 크기 설정\nplt.style.use('fivethirtyeight')\nplt.rcParams.update({'font.size': 16})\n\n# 플롯 생성 및 한글 폰트 적용\nfig, ax = plt.subplots(figsize=(12, 6))\nplot_importance(regressor, max_num_features=8, ax=ax)\n\n# x축과 y축 폰트 설정\nfor label in ax.get_yticklabels():\n    label.set_fontproperties(font_prop)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:06:50.163651Z","iopub.execute_input":"2024-11-08T08:06:50.164088Z","iopub.status.idle":"2024-11-08T08:06:50.437397Z","shell.execute_reply.started":"2024-11-08T08:06:50.164048Z","shell.execute_reply":"2024-11-08T08:06:50.436056Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":"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v19hYWFq0aKFXn31VdWoUUOurq46deqU1q1bZ9m4wsPDQzNmzHBqaNWgQQP98ssvkqTPPvtMe/bskbe3t2W6aK5cudS+fXtJCbvrNmzYUOvXr1d8fLzatWun1157TVWrVlXOnDl17tw5rV+/XkajUeXLl1eZMmXsmvLqTO3bt9eRI0c0ffp0mUwmjRw5UrNmzVK9evVUokQJZc6cWTdv3tRff/2lQ4cOyWQyacCAAUnqmTFjhpo2bapjx47p4sWLaty4sSpVqqSaNWvKy8tLJpNJoaGhOnXqlA4dOmTZCMX8WQEAkBaEawAAIN3Vr19fGzZskL+/v44fP66oqCht2rRJmzZtSvaaChUqJDmWM2dOLVq0SG3atNHt27cVExNjc82lVq1a6YcfflD16tVT7duXX36pdevW6datW7p06VKS6aTt27e3CtekhCmHLVq00IkTJxQXF6eVK1dq5cqVlvOZM2fW0KFD1bx58ycSrmXJkkXLli3T999/r0mTJik6Olrnzp1LcQ24nDlzqlixYk7vy7Nq0qRJCg8P1/bt27VkyRKbZdq2bavJkycnW4erq6t+//13ffrpp5bf3927d2v37t1JypYvX17z58+32gjBGd5++23Nnj1be/fuVXh4uH7++Wer80WLFrUKjKZOnap33nnHEiDu3LlTO3futLqmcuXKmjdvnkaOHOnUvtpr5MiRKlasmL7//ntFRETo9u3byf4eZc5s++tMnjx5tGHDBn399ddasGCB4uPj9ffff6e4ccpzzz0nLy8vp9wDAOC/hXANAAA8EypXrqzdu3dr48aNWrt2rfbv368bN24oPDxc2bNnl6enp8qWLauaNWvqjTfesBmuSVLVqlW1d+9eTZ06VevXr9fFixclJWw08MILL6hdu3aWKWP2KFy4sHbt2qVp06Zp27ZtOn/+vCIiIlJcPN7T01Nbt27VjBkztHLlSp0+fVoxMTEqUKCAatWqpQ8//FBVqlTRpUuX0vQZpYWLi4sGDBigbt26aeHChdq5c6dOnz6tu3fv6uHDh8qdO7dKlCghHx8f1alTR/Xr17c5GvDfKk+ePFq+fLmWLFmiZcuW6dSpU7p79648PDz04osv6v3331e9evVSrSdHjhyaO3eu9u7dqyVLlmjv3r26efOmYmJilD9/flWpUkXNmjVT69at5eLi4vT7yJw5s1as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VUvTtEPzBoV58uSxeV22bNnUtWvXJMdnz54tSXr99dfT1J55QEvOnDntvu6FF16QJN29e1c3btywuWOo+f5feOGFdJ126erq+kxN+0wN4dpjOn78uGUIZvfu3XX06FHt3r1bbdq00R9//GFzu11XV9ckO26aRUVFqXPnzrp//76qVaums2fPauvWrRo0aJAGDx5sV586duyY7LbByQkJCZEkrVu3Tj4+PpbjR44ckYuLi+rUqSOj0ZimOgEAAAAAeFa4urqqQYMGWrFihX799dck4drly5e1f/9+SVLTpk3trvfatWsKDAyU9H8Blj3u3bun+fPny8XFxWbwlhLz8lJpaa9w4cKqVq2aDh8+rF9//VVffPGF1fnAwEBduXJFWbNm1RtvvJGm/vzXZUrvDmRkZ8+e1dtvv6179+7p9ddf16BBgzR37lyVLl1ap06dUosWLdIUSMXGxqpz5846ePCgPDw8NHPmTE2ePFmZMmXShAkTNG7cOLvquXnzpoKDg9P0yzz0NSwszOr4426sUKFCBdWrV0+lS5d+rHoAAAAAAHhcvXr1ksFg0MKFC7V582bL8cjISAUEBCg+Pl7NmzdX2bJlra6bOnWqZVBKYn///bfatWunBw8eyNvbW40bN05S5tChQ0m+W1+9elXt27fXzZs31bNnTz3//PNW59euXWtZTiqx8PBwffXVV5bZc927d09SZvDgwapevbrNATqff/65JOmHH36wqv/u3bvq06ePJOmjjz6yWjcOqWPkmoNOnTqlt99+W7du3VL16tU1f/58ZcmSRR4eHlq5cqUaN26soKAgNWnSRL/++qsKFiyYYn2xsbHq0qWLNm7cqJw5c2rZsmXy9vaWt7e3xo8fr169emnIkCEymUyWBz45if+CsGX48OEaOXKk6tWrZ3MzhbQ4ePCgFixYoD///FPBwcGKiopSrly5VKZMGdWpU0fvv/++AgICHqsNAAAAAAAedeTIEavRV+YljObMmaMNGzZYji9YsEAFChSQJPn6+mrYsGHq16+fWrduLT8/P+XPn1+BgYG6ceOGypQpo/Hjxydpa/jw4erfv798fHxUvHhxZcqUSRcuXFBQUJAePnyoIkWKaMmSJTY3CHz77beVI0cOlS9fXh4eHrp+/br279+vmJgYvf/+++rfv3+Sa3bt2qVp06apSJEiqlixovLkyaPr16/r2LFjMhqNypw5s4YOHWrZLDGxGzdu6MyZM5bNCRJr2rSpPv74Y02fPl1vvPGGateuLTc3N+3YsUP37t1TjRo11K9fv9Q/fFghXHPAhQsX1LhxY929e1dVqlTRL7/8YrUQYuHChbV69Wq99dZbOn78uLp3767ly5cnW9+DBw/UuXNnbdq0SdmzZ9fixYuthna+9957io2NVd++fTV06FDdvXtX33333RO9x9TEx8fr888/19y5cy3HcuXKpYIFC+rmzZvav3+/9u/fr4kTJ2r8+PFq165dOvYWAAAAAPBvEx4eroMHDyY5fvXqVcuun1LCRoGJde/eXRUrVtSkSZN06NAhRUZGqkiRIvr888/Vu3dv5cqVK0mdX3zxhfbt26dTp05p27ZtioyMVK5cufTyyy+rcePGev/9921eJ0mffPKJtm3bpqNHjyosLEzPPfecGjRooC5duqhu3bo2r2nSpIkiIiJ09OhR/fXXXwoNDZWrq6uKFCmid955R127dlXFihXT8nFZjBw5UjVq1NCMGTO0f/9+xcbGytvbW71799ann36aoTYSeFYYjEbj4837+w+Kj4/Xhx9+qCtXruiXX36Ru7u7zXI3btxQ7969NW7cOBUsWFATJ07UgAED5OfnZ7W76Pnz5/Xmm28qMjJSixcvtrmoopSQtn/xxRf6+eefLfO/zW1v27YtyS6eyXHGyLWxY8dq6NChypQpkwICAtS1a1fLBg4mk0kHDx7U+PHj9ccff8jFxUVbtmx54jueAk9DVFSUgoODVbRo0Qy1wCb+m3hekZHwvCIj4XlFRsLziowkoz6vjFxzgIuLi3766SfFxMRYtvq1pUCBAlq8eHGq9ZUsWVK///67oqKi9OKLLyZbrlOnTqpfv75lOGt6WrZsmSRp4MCB6tWrl9U5g8Gg6tWra+HChWrevLl27dqlZcuWEa4BAAAAAIB/HTY0cFCWLFlSDNbSqlKlSikGa2bPQrAmybJRQ7Vq1ZItYzAYLOfZaRQAAAAAAPwbEa7BIV5eXpKkNWvWJFsmOjpaW7dulaRUN3QAAAAAAADIiAjX4JBu3bpJkn766Se1b99eW7Zs0Y0bNxQdHa2LFy9q4cKFqlu3ro4dO6YcOXLo3XffTeceAwAAAAAAOB9rrsEhnTp1ktFo1Hfffad169Zp3bp1NssVKVJE06dPV4kSJZ5uBwEAAAAAAJ4CwrWn6IMPPtA777yjrFmzOq3O48ePS5I8PT3tvsbf318dOnRQ9uzZH6vtHj16qE2bNvrll1+0b98+BQcHKzo6Wrly5VLp0qVVt25dNWvWzKn3CwAAAAAA8CwhXHuKcubMqZw5czq1zsKFC6f5Gnd3d7m7uzulfU9PT3Xv3l3du3d3Sn0AAAAAAAAZCWuuAQAAAAAAAA4iXAMAAAAAAAAcRLgGAAAAAAAAOIhwDQAAAAAAAHAQ4RoAAAAAAADgIMI1AAAAAAAAwEGEawAAAAAAAICDCNcAAAAAAAAABxGuAQAAAAAAAA4iXAMAAAAAAAAcRLgGAAAAAAAAOIhwDQAAAAAAAHAQ4RoAAAAAAADgIMI1AAAAAAAAwEGEawAAAAAAAICDCNcAAAAAAAAABxGuAQAAAAAAAA4iXAMAAAAAAAAcRLgGAAAAAAAAOIhwDQAAAAAAAHAQ4RoAAAAAAADgIMI1AAAAAAAAwEGEawAAAAAAAICDCNcAAAAAAAAABxGuAQAAAAAAAA4iXAMAAAAAAAAcRLgGAAAAAAAAOIhwDQAAAAAAAHAQ4RoAAAAAAADgIMI1AAAAAAAAwEGEawAAAAAAAICDCNcAAAAAAAAABxGuAQAAAAAAAA4iXAMAAAAAAAAcRLgGAAAAAAAAOIhwDQAAAAAAAHAQ4RoAAAAAAADgIMI1AAAAAAAAwEFOCdcePHigI0eO6OjRozbPr169WrVq1VKBAgVUoUIFDRw4UA8ePHBG0wAAAAAAAEC6cUq49ssvv6hu3boaMGBAknMbN25U586ddfz4cUVHR+v69euaNGmSOnXq5IymAQAAAAAAgHTjlHBt69atkqS33347yblBgwZJkvLmzasPP/xQ9erVk8lk0rZt27Ry5UpnNA8AAAAAAACkC6eEa6dOnZIkVa9e3er433//rZMnTypTpkxavXq1Ro8erV9//VVt2rSRyWTSsmXLnNE8AAAAAAAAkC6cEq7duXNHklSoUCGr4zt27JAk1axZUxUqVLAc79q1qyQlu0YbAAAAAAAAkBE4JVy7d++ezeP79u2TwWBQ3bp1rY6XKFFC0v+FcgAAAAAAAEBG5JRwLWfOnJKk69evW449fPhQe/fulZR0umjmzJklSVmyZHFG8wAAAAAAAEC6cEq4VrZsWUnS6tWrLcc2b96su3fvKkuWLHrxxRetyt+4cUOS5Onp6YzmAQAAAAAAgHThlHCtcePGMplMGjt2rAYMGKBJkyYpICBABoNBDRo0UPbs2a3K//XXX5KkYsWKOaP5VAUGBsrf318jRox4Ku2lVf/+/eXv76/jx4+nd1ccsnv3blWoUEHe3t6aO3duencHAAAAwL/YlStX1LdvX/n6+srT01MlS5bUO++8ow0bNqR43fbt29W6dWuVLFlSBQoUUPXq1TV06FDdv38/1Tb37NmjLl26qEKFCpY2a9eura+//lqxsbGpXn/t2jUVL15c7u7u8vDwsPteHxUeHq4hQ4boxRdfVIECBVSyZEm1adPGst45gPRhMBqNpsetJDIyUrVq1dL58+dlMBgkSSaTSVmzZtWmTZvk4+NjVb5Dhw5av369vv76a/Xt2zdNbR04cCDZNd7M6tevb/V+4cKF6t69u3x9fbV9+3arc7t27dLnn3+epj5ICX+5urq6Wh07duyYTpw4keJ1np6eev31162O+fj4KDg4WL/++muSvjsiICBA8+fP10cffaTRo0fbLPPDDz9o0KBB6tixoyZPnvxY7d2+fVt79+7VjBkzFBsbqw0bNqh79+5auHChBg8erJ49ez5W/cCzJCoqSsHBwSpatKiyZcuW3t0BUsTzioyE5xUZCc9r+jl8+LBatmyp0NBQFShQQNWqVVNoaKgOHjyo2NhYffnll/rmm2+SXDd58mT169dPBoNBNWvWlKenpwIDA3Xz5k2VKVNG69evtxl6mUwmff3115o2bZplVlbhwoUVEhKi06dP6+rVq7py5YplqaTktG7dWps3b5bJZJKLi4tCQkLSfO+3b99Wo0aNdPbsWRUoUEA1atTQrVu3FBgYKEkaMWKEPv744yTX8bwiI8moz2tmZ1Ti5uamP/74QwMGDNDmzZsVFxcnHx8fDRo0KEmwdvXqVW3cuFGSVKdOnTS39fXXX+vgwYMpljEajXbXFxERoTNnzqS5Hw8fPkxybOXKlRozZkyK1/n5+SUJ15KzdOlSTZ061a6yS5YsUYECBewqe/LkSQ0fPlx58+bVkCFD7LomJfnz55e3t7cOHTpkCfOGDBmiP/74Q99//73efPNNPf/883bVVWrRdYVEJ/1sgWeLm6S0/w8RkD54XpGR8LwiI+F5fZqMHxRWVFSUOnfurNDQUL3zzjuaPHmyZZbU4cOH1apVK40aNUo1a9a0+s519OhR9e/fXy4uLlqyZIneeOMNSQmDRNq3b68dO3aod+/emjdvXpJ2hw8frmnTpunll1/WjBkzksy+Onz4cKoBwLx587Rp0yZ99NFHmjFjhsOfQc+ePXX27FnVrl1bixcvlpubmyRp48aNat++vb7++mv5+fmpUqVKDrcBwDFOCdckycvLSz/99FOq5fLmzavDhw9LkooWLZrmdho3bqzy5csnOR4WFqaVK1emuT6zMmXK6MCBAymWuXTpkqpUqZJqXeXKlbP8hW32999/W0bNGY1Gq9AsuZF4t27d0pEjR1JtT5Kio6PtKiclTEONjo5W//79H2tIstmtW7fUoUMHtWvXTp06dZIkeXh4qE+fPurfv7/69eun33777bHbAQAAAPDftWbNGl25ckV58uTRuHHjrJYfqlatmr788kt99dVXGjVqlFW4Nn78eJlMJnXs2NHqe5qbm5smTpwoX19frVq1SqdPn7asJy5JZ86c0bhx4+Tp6amlS5fK3d09SZ+qVauWYp8vX76sfv36qXr16urevbvD4dqpU6f0xx9/yMXFRRMnTrQEa5LUoEEDdejQQfPnz9f48eM1c+ZMh9oA4DinhWv2cnNze6y11pKbwnn69OnHCtecqUqVKho2bJjVsVmzZlnCtXv37mnkyJGp1tO1a1e1adPG8v7q1auqW7eupIRpqfny5bOcS/w6JWfOnNHWrVvl6uqqDh062HVNaubMmaMrV65o9uzZWrRokW7evClJat++vYYMGaKtW7fq7NmzKl26tFPaAwAAAPDfYx6k4evrazPoMs+M2rdvn27evCkvLy/FxMRYZk61atUqyTXFihXTyy+/rMDAQK1Zs8bq++bMmTMVFxenzp0722wvNSaTST169FBMTIwmTZpkWULJEWvWrJEkvfzyyza/T7dq1Urz58/X+vXrFRsbqyxZsjjcFoC0e+rh2pOSeBFJc7hjFhYW9rS7k6LnnntOo0aNsrwfPny4QkNDk5Rzc3Oz+olE4jI5c+aUl5eXJOnBgwe6c+eO5VxUVFSybc+dO1cmk0kNGzZ0yqg1SerVq5c+/fRTSbL6B8PDw0MNGzbUqlWrNGfOnCSBIwAAAADYKyIiQlLC9ylbzN9vTCaTjh49qgYNGujs2bOKjIyUJFWtWtXmdVWrVlVgYKCCgoKsjm/dulVSwtI+RqNRv//+u44fPy6DwaAKFSqoefPmKX6n+vnnn7Vz504NHDhQ5cqV06VLl9J2w4mY+5bSPUgJn9G5c+fsXpYHgHM4PVxbvXq1fvnlFx0+fFghISGKiYmxWqwxODhYK1eulKurq7p16+a0dv/55x/L63LlyqX5+jNnzjj00whH5MqVy+reJ06caDNce9SpU6csr//++28VL15ckrR8+XJ1797drrZ37twpSXrttdeSnDMajbp165bc3NxUpEgR7d2711Lez89PtWrVspQ9evSotm3bJqPRKG9vb7Vo0UJ58uRJUmetWrW0atUq7dq1y67+AQAAAIAt+fPnlyRdvHjR5vnEx81Blvm/efLkUa5cuWxeV7hwYauykhQTE2NZm/vSpUvq1q2bbt++bXXdgAEDNGHCBLVs2TJJnRcuXNCgQYPk6+urzz77zI67S5m5b0WKFLF5Pnfu3MqdO7fCwsJ06dIlwjXgKXNauBYaGqr3339fu3btksn0fxuQPjr01dPTUz/88IPu3r2ratWq6cUXX3zstu/fv2/ZSCB//vxJpkjeu3dP165ds3ltjhw5VKZMmTS3mSlTprR3NJG4uLg0l584caLl/ffff6/XXntNuXLlkoeHh3x9fS3ngoODbe4+ExERoePHj0uyvTbA8uXL9fnnn6t27dqqWLGipkyZYnW+TZs2mj59ugYMGKBJkyZZnRs2bJh+++03Va5c2eq4uZ3jx48rIiJCOXLkSNN9AwAAAICU8IP7MWPG6MiRIzp69GiS9bBnzZpleR0eHi4p4buipBS/h5h3+jRfIyV8vzV/r+3bt6/Kli2r2bNnq0qVKrpx44bGjx+vRYsWqVu3bipYsKBeeeUVy7UPHz7Up59+qpiYGE2ePFmZMz/+12577iNHjhwKCwuzug8AT4dTwrX4+Hi1adNGBw8eVNasWdWyZUtVrFhR/fr1S1I2a9asatGihWbOnKk//vjjscO1ixcv6oMPPtCJEyfk5uamNWvWJBm5tnDhwmRHdtWqVSvVjQyczd6NEczi4+MVEBCgQ4cOKXfu3MqfP7+OHz+uxo0ba/HixWrYsKEaNmxoKR8QEKD58+cnqefMmTOKj4+XJJubQpgdO3ZMO3bsUOXKlVWpUiUdO3ZMx44d07JlyxQSEqItW7bIy8tLtWvXVmhoqLZs2aLbt2/rk08+0Z49e6wCVXM7cXFxOnPmjFUICAAAAAD2iIqK0ssvv6waNWpo3759at++vUaMGKEaNWooNDRUs2fP1pIlS5QlSxbFxsYqPj5eUVFRluWDTCZTssvn2CqTuGy2bNm0dOlSyyCOokWLaty4cbpx44a2bt2q77//Xr/++qul/LRp0xQYGKi+ffuqVKlSlroSb0KX0lI+tpiDvtjY2GSvTa5MTEyM1X+BZ1lantfUdup9mpwSri1YsEAHDx5Unjx5tHr1avn4+CgiIsJmuCZJr7/+umbOnKl9+/Y53GZ4eLgmTZqkH3/8UQ8ePFDu3Lk1d+5cu6aExsTEyM/Pz+G2E/P19U2y40tISEiSwC7xEGMXFxerdQKMRqMePnxos36j0aiPPvpImzZtUtasWTVz5kyVLVtWrVu31rFjx1S3bl1NnTpV9erVS7Wv5qmn2bJls9pZ51F3797VwIEDLYt5Pnz4UB07dtS6deu0ZcsWvfbaa1qyZIllPbg5c+aoV69eOnHihE6dOmUV3Lm5uSlr1qyKjo6W0WhMtY8AAAAA8Kjg4GBJ0uDBg/Xll1/q6NGj6ty5s1WZ9u3b68iRIzp58qRMJpOCg4P14MEDSQkjv8x1POrq1auSJFdXV0sZ8zptklS7dm09ePAgyfVNmzbV1q1btW/fPp0/f15ZsmTRxYsXNXz4cJUpU0bvvPOO1TXXr19Pcj/2cnV1tfQ1uWvNI9aioqJslnl0bXLgWZba8+ri4qKSJUs+pd6kzinh2i+//CKDwaBvvvlGPj4+qZavUKGCJOncuXNpbstoNGrmzJmaPHmy7t69KylhV5gffvhBJUqUsKuOhw8fWubPPy5bC1hu2bJFW7ZsSfaaIkWK6Pz585b3Pj4+Nv/y279/vz788ENdvnxZ7u7umjt3rmrXri1J2rRpk7p166YNGzaoZcuWGj58uPz9/VPsqzlcS21tuWLFilntkpMpUyZ98MEHWrdunSRp9OjRVhstdOrUSd98840iIyN16dKlJKPi3N3ddfPmTbvWlQMAAACARxUtWtTy3/Xr12vnzp3avXu3QkNDlT9/fr355pvy9fW1zBDy8/NT0aJFLcvUhIeHK2/evJYpoImZg7RSpUpZ2pESvuuFhISoQoUKVsfNXnjhBUkJs3Tc3NxUoEABrVu3TtHR0YqLi7P6TiX938i1+Ph4yzpsAQEBqlu3bqr3X6pUKZ06dUoRERE2+xIeHm7Z8KFq1apWZWJiYiy7p5pDOuBZlVGfV6eEaydOnJAkvfnmm3aVz5s3rySleSTT8uXL9dlnn1nmm/v4+Khfv35WUyLtkS1btlTbbtKkifbs2aNvv/1WvXv3tqvecuXKqXHjximWMQeLqYmLi5O/v78uX76sihUrasGCBfL29racz5Mnj5YsWaKJEydq4sSJatSoUap1mocGp7Yts61FMhP/5fxoOpw5c2YVKFBA58+ftxrqbGb+A2H+qREAAAAApMWj07/efPPNJN8/L1y4oJs3b+q5555T9erV5erqqooVK8rNzU2RkZE6ceKEzY3dzDtxVqtWzaqdqlWravPmzbp3757N6Wfm76VSwg6m2bJls6yvduHCBV24cCHZ+wkMDJSUMFDBnqltVatW1dq1a3Xs2DGb5f/8809JCeuuVaxY0eZ3PldX12dqGh2Qkoz2vDolXDP/pWLvbpvmxfzTurCjj4+PIiMj9corr6hnz552h3lPS+vWrdW6dWun1JU5c2bNmzdP8+bN0+DBg20+VAaDQZ999pm6du1qtbBl9uzZlTt37iRTP83vU5u7/OgmFFLCWnn2nn+UOXBLPNoNAAAAAJzJvAHc+++/b/kBv6urqxo0aKAVK1bo119/TRKuXb58Wfv375eUMM0zsbfeekubN2/Wrl279PDhwySb2m3btk2SVKZMGeXOnVuS9Omnn+rTTz+12T/z2tsuLi42N6BLSZMmTTRs2DD9+eefCg4OTjJ6zbzmW8OGDVMdTAHA+R5vy8v/z7x+mL1zuM1TMs1bKdurTJkyOnz4sP744w+nBWsTJ06Uu7t7kl979uyRlDCn39b5xD+leFIqVqyokSNHpprWPrpjzKhRo3T58mUNGTLE6rh5xOC9e/ec29FUmNsztw8AAAAAjjh16pTCwsKsjsXFxWns2LGaPXu2SpYsqT59+lid79WrlwwGgxYuXKjNmzdbjkdGRiogIEDx8fFq3ry5ypYta3Vd27Zt5e3trRMnTuj777+3Wid7586dmjJliiTp448/dtr9Va9eXdWrV9ehQ4esjpcvX16NGze2bHaXeFbQpk2btGjRImXKlMnuWVcAnMspI9eqVKmiTZs2acuWLUn+QrJl+fLlkqSXXnopzW0lXletZs2akhK2XE5p98uU5M2bV2XKlLGrbFxcXIpDexObNGmSpkyZotq1a2vq1KkO9S2xYsWKJflHJDUfffSRRo8ebXlvHlkYFRWliIiIFLdxdpb79+9bRq7ZO7IRAAAAAGyZM2eO5syZI19fXxUsWFDR0dE6ePCgbt26pZIlS+r3339P8j3H19dXw4YNU79+/dS6dWv5+fkpf/78CgwM1I0bN1SmTBmNHz8+SVuurq6aP3++mjVrpjFjxui3336Tj4+Prl+/rkOHDunhw4dq3769unbt6rT7Mw9ESbyhgtmECRP0zz//aPv27apatapq1qyp27dva8+ePTKZTBoxYoQqVarktL4AsJ9TwrUWLVpo48aNGjdunJo3b67ChQsnW3bXrl2aM2eODAbDY0+hPHnypKTUtzHu2LGjOnbsaPNcp06d1KlTJ7vau3r1qipWrGhX2fDwcF27ds2y6UJKjh07lmqZQoUK2Vx80xaj0WjzL+OyZcsqc+bMiouL06lTpywLcD5J5vX4smTJYlfwCgAAAADJadCggS5fvqygoCD99ddfypo1q0qXLq0ePXroo48+SrI0jln37t1VsWJFTZo0SYcOHVJkZKSKFCmizz//XL1791auXLlsXlepUiUFBgZq7Nix2rBhg9avX6/s2bPLz89P77//vlq2bPkkb9dK/vz5tW3bNo0fP16rVq3SH3/8ITc3N9WrV08BAQGWze8APH1OCdfatm2radOmKSgoSG+88Ya++eYbvfrqq5bzkZGROn/+vJYvX66pU6cqPj5efn5+euONN5zR/GPZuHGj+vXrZ1dZ81px6WHfvn12l/X399fixYuTHHdzc1OlSpV05MgRHT169KmEa0eOHJGU8I9Scv/QJXauQ8En3CPg8Zi3Ni9atGiGWmAT/008r8hIeF6RkfC8pp+6devatbumLXXq1FGdOnXSfF2BAgU0evRoq1lBjihevHiqG+uldj537tz69ttv9e233z5WXwA4l1PCtUyZMmnx4sVq1qyZzp8/b9lW2LzwfeLdJ00mk8qVK6fZs2c7o+nHFh4ebhl6+19Qq1YtHTlyRHv37lWXLl2eeHvmtetq1ar1xNsCAAAAAAB42pyyoYGUMG1x+/bt+vjjj+Xm5iaTyZTkl6urqz766CNt2rRJ+fLlc1bTTlGpUiUZjUa7f9k7RfNZ895778lgMGjDhg1PfFOG8PBwbd68WQaDQe+9994TbQsAAAAAACA9OGXkmlmuXLk0YsQIDRw4UAcOHNDp06cVFhamHDlyqESJEvLz80t2LvvjeP311+0uu2nTJlWvXj3J8TNnztg8npwGDRrou+++S7Xchg0b7F7I/80339TSpUvt7oMjSpcurbp162rLli1asGCBPvnkE8u5Ll26JDuarWTJkikOUQ4MDExybP78+YqIiFD9+vVVqlSpx+47AAAAAADAs8Yp4drIkSMlJYRDvr6+cnNzU+3atZ/4goqenp5pviZLliw2j0dHR6dpeqiPj0+K53PmzJnm/uXJkydN5R01bNgw7d69W+PGjVPHjh2fSOAZHh6u8ePHK2vWrBo6dKjT6wcAAAAAAHgWODVca9asmTOqs9vp06cfu46WLVs+kR1eAgICFBAQ4PR67VGlShXdu3cv2W2Yy5cvr6+//lqDBg3SoEGDNHbsWKf34dtvv9Xt27c1ePBglS9f3un1AwAAAAAAPAsMRqPR9LiVlC5dWnfv3tX58+ftngIJABkRu4MhI+F5RUbC84qMhOcVGQnPKzKSjPq8OmVDgzJlykiSrl696ozqAAAAAAAAgAzBKeFa69atZTKZtGTJEmdUBwAAAAAAAGQITgnXPvjgA9WqVUtTp07VnDlznFElAAAAAAAA8MxzyoYGS5Ys0TvvvKPz58/r888/1/Tp0/XGG2+oRIkSyp49e4rXtm/f3hldAAAAAAAAAJ46p4Rrn376qQwGg+X9P//8o3/++SfV6wwGA+EaAAAAAAAAMiynhGuSZDKlfdNRR64BAAAAAAAAnhVOCddCQ0OdUQ0AAAAAAACQoThlQwMAAAAAAADgv4hwDQAAAAAAAHAQ4RoAAAAAAADgIKesubZnzx6Hr/Xz83NGFwAAAAAAAICnzinhWtOmTWUwGNJ8ncFgUEhIiDO6AAAAAAAAADx1TgnXJMlkMj2VawAAAAAAAIBnhVPCtaNHj6Z4Pj4+XtevX9fmzZs1Y8YMeXp66qefflL+/Pmd0TwAAAAAAACQLpwSrhUrVizVMt7e3nrllVfUrl07NW7cWAEBAdqyZYszmgcAAAAAAADSxVPfLbRs2bL66quvdPLkSU2aNOlpNw8AAAAAAAA4zVMP1ySpQYMGkqTly5enR/MAAAAAAACAU6RLuJY7d25J0uXLl9OjeQAAAAAAAMAp0iVcCwoKkiRlzuy0zUoBAAAAAACAp+6ph2u3bt3SN998I4PBoCpVqjzt5gEAAAAAAACnccrQsZEjR6ZaJioqSmfOnNH27dsVGRkpSfr444+d0TwAAAAAAACQLpwSro0YMUIGg8GusiaTSS4uLurXr5+aNGnijOYBAAAAAACAdOGUcK1IkSIphmsGg0HZsmWTl5eXXnzxRbVv315lypRxRtMAAAAAAABAunFKuHbs2DFnVAMAAAAAAABkKOmyWygAAAAAAADwb+CUkWt79uyRJL3yyit2r71mvsbPz88ZXQAAAAAAAACeOqeEa02bNlWmTJkUHBwsNze3VMvHx8dbrgkJCXFGFwAAAAAAAICnzmnTQk0m01O5BgAAAAAAAHhWpMuaa/Hx8ZIkFxeX9GgeAAAAAAAAcIp0CdcuXLggScqTJ096NA8AAAAAAAA4hUNrrpk3I3jUvn37lDVr1mSvi4+P140bN/Tzzz/LYDDIx8fHkeYBAAAAAACAZ4JD4VrTpk2T7ApqMpnUqlUru643mUwyGAz64IMPHGkeAAAAAAAAeCY4vFto4s0IzEGbPRsUGAwGlS9fXj169FDz5s0dbR4AAAAAAABIdw6Fa0ePHrW8NplM8vX1lcFg0L59+5Q9e/Zkr8uSJYvy5s2rbNmyOdIsAAAAAAAA8ExxKFwrVqyY1fsiRYooU6ZMKl68OMEZAAAAAAAA/jMcnhaa2LFjx5xRDQAAAAAAAJChZErvDgAAAAAAAAAZFeEaAAAAAAAA4CCnTAs1u337tmbOnKnt27frzJkzCgsLU3x8fLLlDQaDQkJCnNkFAAAAAAAA4KlxWri2Y8cOffDBBzIajTKZTM6qFgAAAAAAAHhmOSVcu3r1qt59912Fh4erRo0aatWqlb744gsZDAaNGTNGUVFROnHihNauXSuj0ajy5cvr008/VaZMzEoFAAAAAABAxuWUcG3q1KkKDw9XtWrVtHbtWmXKlElffPGFJKldu3Zyc3OTJI0cOVJffvmlFi1apB07dmjGjBnOaB4AAAAAAABIF04ZOrZt2zYZDIZUR6PlyJFDkydPVoMGDfTbb7/p119/dUbzAAAAAAAAQLpwSrgWHBwsSfL19U1yLiYmJsmxzz77TCaTSQsWLHBG8wAAAAAAAEC6cEq49uDBA0mSh4eH5Zh5KqjRaExSvkKFCpKkEydOOKN5AAAAAAAAIF04JVzLmzevJCk0NNRyzNPTU5J05syZJOVDQkIkSffu3XNG8wAAAAAAAEC6cEq4VrZsWUnSjRs3LMfMU0RXrlyZpPxvv/0mScqfP78zmgcAAE/BwIED5e7uLnd3d40ePTrJ+StXrmj27Nnq2bOnateuLU9PT7m7uysgICDFev/880/16dNHb7zxhsqXLy8vLy8VKlRIL7/8svr27atLly7ZvO7UqVP66quv1KhRI1WqVEkFCxZUgQIFVLVqVfXo0UPHjx93+F5v3bqlvn37qnLlyvL09FSZMmX03nvv6ciRIw7XCQAAgH8np4Rrr7/+uiTp2LFjlmMtW7aUyWTSokWLNHToUB0/flxBQUEaMWKExo4dK4PBoPr16zuj+Qzlr7/+Uv/+/TV16tT07opNo0aNkr+/vwIDA9O7KwCAZ8iff/6pSZMmyWAwJFtm1apV6t27t+bOnaujR4/aXHfVlk2bNmnmzJm6fv26SpcuraZNm8rPz0+hoaGaMWOGXnnlFe3atSvJdfv379e0adN07tw5FStWTA0bNlTt2rUVFxenBQsWqHbt2g5tnnT27Fn5+flpxowZypQpk5o0aaKiRYtq5cqVql+/vlavXp3mOgEAAPDvZTAajabHreTEiRPy8/NT7dq1tWLFCsvxli1bauvWrUn+R9xkMsnDw0Pbt29XkSJFHrf5dGE0GrVlyxa7yr7wwgsqUaKEJGnhwoXq3r27fH19tX37druuHzhwoI4fP67OnTvrrbfesruPcXFxWrRokVasWKHg4GBlz55dL730krp162YZbfio+vXr6+DBg5o8ebI6duxod1vOUmrRdYVEP3zq7QIAEhg/KJzkWGRkpGrVqqUHDx6oatWqWrt2rfr166e+fftalVu7dq127NihKlWqqEqVKlqxYoXGjBmjd999VxMnTky2zX/++UfZsmVT8eLFrY7HxMRo4MCBmjZtmgoXLqygoCC5uLhYzl+6dEnR0dFJ/k17+PChJk+erAEDBsjNzU0nTpyQu7u7XfdvMplUu3ZtBQUFqW3btpoyZYqlzTlz5qhXr17KmTOnDh06JC8vL7vqhH2ioqIUHBysokWLKlu2bOndHSBFPK/ISHhekZFk1Oc1szMqqVChgnbt2pUkRFuwYIH69eunxYsXKyoqynLcz89P48ePz7DBmiRduHBBXbt2tavs5MmTLeGaIw4dOqQ9e/aoTp06dl9jNBrVpk0b7d+/3+p4UFCQ5s6dq0mTJqlt27Zp7ouPj0+ar3nrrbc0bNiwNF8HAHg2DB48WOfOndOyZcv0+++/J1uuSZMmatKkieW9vSO8ypUrZ/O4q6urhg4dqjlz5ujq1as6deqUKlasaDn/aBhnlilTJgUEBGjmzJm6ePGiAgMD1ahRI7v6smnTJgUFBSlPnjwaO3asVZj3/vvv6/fff9eOHTs0bdo0ffvtt3bVCQAAgH83p4RrklSpUqUkx7Jnz65x48bpu+++0+nTpxUTE6PixYtbNjvIyAoUKKAvvvjC6tj06dMVHh6u5s2bW/0U3dZnkxbm3VjN/7VHz549tX//fuXOnVtDhw5VnTp1FBISopEjR2rDhg3q0aOHKlasqEqVKql69eqW64KDg1OsN7Xztpg3sAAAZDy7du3STz/9pHbt2qlBgwYphmtPgsFgUKZMCatYZM2aNU3XZs6cOc3XrVmzRpLUqFEj5cyZM8n5Vq1aaceOHVq9ejXhGgAAACQ5MVxLSfbs2VWlSpWn0dRTU7BgQfXv39/q2Jw5cxQeHq4WLVronXfecUo79+/ft+y4evToUbuuuXjxolauXCmDwaBly5apRo0akhJ+wr906VK99dZblp+6T5o0yeaOrqnZtm2bqlatmubrAAAZx/3799WjRw95enpqxIgRT739+Ph4jRgxQpGRkXr++edVsmRJu6+dM2eOzp49q/z58+vFF1+0+7qgoCBJSvbfOPPxc+fOKSIiQjly5LC7bgAAAPw7PZVw7b8gLCxMd+/elZQwZdTs7Nmzql27tuV9XFyc3XXGxsbq888/V3h4uCRp3bp1WrFihVq0aJHideadzMqXL28J1hL74IMPtGPHDh08eFBSwlo3Zm3atLE7xAMA/LsNGDBAly5d0oIFC+xes+xxBAcH6/vvv5ckhYaG6tixY7p69apKliyp2bNnW0awPSoyMlJ9+vSRlPDv8cmTJ3X+/Hl5enpqzpw5yp07t919MO9MmtzSFebjJpNJly9fVvny5e2uGwAAAP9OTg/Xbt26pRUrVujw4cMKCQlRdHS0Vq1aZTlvNBp18eJFZcmSxWrdlIxu+vTpevjwoeX1O++8I29vbxkMBqv1WsxlUrNx40YNHjxYx48fl8Fg0AsvvKCDBw/q/fffV5s2bfTVV18l+xP8iIgISQmj62wpXLiwVbnECzJnyZLFrv4BAP7dtm7dqtmzZ6tly5Zq2rTpU2kzNDRUixcvtjpWpUoVTZo0KcUQKyYmJsl1JUqU0MSJE/XKK6+kqQ/379+XpGRHpCU+bv7hFwAAAP7bnBaumUwmjRw5Uj/88INiYmIsxx7d5CA2NlYNGzZUbGysDh069FgL/T8rZs2aZflJu4+Pj44dO6Z69erpp59+Uv369XX58mVLWfNuobbExMRo1apV+vHHHy3TUry8vDR69Gg1adJEI0aM0I8//qhly5bpt99+U8uWLfXJJ5+oWrVqVvW4ublJkq5fv26znWvXrklK/osDAOC/KyoqSmFhYerRo4c8PDw0ZMgQq02J4uPjJSWMxE583BbzaO34+PhUy0pS2bJldePGDZlMJt24cUMHDhzQ6NGjVadOHQ0ePFgffvihzeuyZcumGzduSJJu376toKAgjR07Vs2aNZO/v79Da6PFxMTY7HNsbGyqZeAY8/8/mv8LPMt4XpGR8LwiI0nL8/os7SbqtHCtT58+mjNnjkwmk0qUKKFKlSpZFgVOLH/+/GrYsKFWrVql1atXKyAgwFldeOrCw8P1v//9T4sWLZIk9e/fX59++qm6d++u33//Xa1bt5a/v7/69+9vCbySM3/+fA0ePFh37tyRlLBhwqeffqquXbtaQrB+/fqpc+fO+vHHH7VgwQItW7ZMy5YtU5UqVTR9+nQ9//zzkmRZ3+7kyZPav3+/XnrpJau25s6dK+n/1o159dVXLefOnz//uB8LACADCw4O1uDBg3Xt2jV9//33ioyMVGRkpOW8edTzvXv3Ut3kJiwszHKNIxviVK1aVdOnT1fbtm01cOBAeXt7W20YlJyyZctq0qRJev/99zV16lSVKVNGtWrVsqtNNzc33bt3T5cvX7bZZ/M9SQmj3By5L6Ts5s2b6d0FwG48r8hIeF6RkaT2vLq4uKRpPd4nzSnh2rZt2yxroYwZM0ZdunRRREREsuuVNGzYUCtXrtTu3bszbLi2c+dO9ejRQ5cvX1b27Nk1evRoderUSZI0e/ZsvfTSS/r22281ZcoUHTp0SBs2bEixvkKFCunOnTuqWrWqPvzwQ7Vq1crm7mZFixbV6NGj9dVXX2n27NmaM2eOrly5omLFilnKlCxZUo0bN9Yff/yhtm3b6vvvv1ft2rUVEhKiUaNGaevWrXJxcdHHH38sSfr777+d+MkAADKyokWLaufOncqcObNWr16t1atXW50/e/asJGnt2rU6evSoPD09NX36dJt1mdc6y5Ejh4oWLepwn5o2barZs2fr6NGjqlevnt3XtWvXTkOGDNGBAwfUoUMHu64pXry4goKCFBUVZbPPJ06ckJSwi2n16tUZBe5EMTExunnzpry8vOTq6pre3QFSxPOKjITnFRlJRn1enRKuzZo1SwaDQZ988om6dOmSavnEI6syqm3btuny5cuqVKmSZsyYkWQtGH9/f9WqVUsBAQH6+uuvU62vXr162rVrl3x8fOxq38PDQ1988YV69+6t8+fPJxkZN2nSJL3zzjs6cuSI/P39rc65uLho/Pjx8vX1lWS9C2mnTp107NixVNtv37693euzFStWTGvXrrWrLAAgfZmH18fFxSkwMDDZcsHBwQoODlbRokWTHZKfOXPC/2a4uLg81rB9c0gXGhqapnry5MkjSbp7967d1/n6+iooKEh///23zWuOHz8uSSpVqpQ8PDzs7gvs5+rq+kxN8wBSwvOKjITnFRlJRntenRKumXed7Nixo13lzQvom6dAZkT9+vVTgQIF9MEHHySbplaqVEnbtm2zOtaxY8dkPyd7g7XEXFxcVKZMmSTHn3vuOW3cuFFz5szR6tWrFRwcLDc3N1WrVk3+/v5Wm0kUL17c8trWaDlbzGvb2MP85QoAkDEkXiv0Uf7+/lq8eLH69eunvn37PpX+7Ny5U5JUunTpNF23Y8eONF/XtGlTzZs3T+vWrVNERESSkWm//vqrJKlZs2Zp6gsAAAD+vZySety9e1fS/+1CmZpMmTJJsn/nzGdR5syZLdMqpYSpmHFxcVqzZo0qV66c7HW//PKL+vTpo8qVK2vNmjWKiYnRyy+/7JQ+Va1aVbNmzbK8d3V1Vbdu3dStWzen1C8l7Pb6qF27dqlZs2bKmjUr8/gBAGk2btw4de7cWfny5bM6bjQa9d133+mvv/5S7ty59fbbb1udnzJlipo3b55kGYrIyEhNnjxZq1atUubMmZP8UOvatWt66623JEkrV65UoUKFLOfeeOMNVa5cWUFBQerTp48mT55s2fV7zpw52rFjh3LmzKlPPvnEafcPAACAjM0p4VrOnDkVGhqqsLAwyxSMlFy5ckVSwuiqf4t79+4pPj7esotacmJiYhQWFqb79+9LSggYL1y44JQ+mEcEAgCQHm7cuGFZf1T6v92p161bp/r161uOjxkzxrI0gSQNGTJE3333nSpUqCBvb29lzpxZ169fV1BQkCIiIpQ7d27NnTtXnp6eVu1NnTpV/fr1U7ly5VS6dGnLrqF///23jEajsmbNqgkTJqhChQpW18XGxurMmTOW14kZDAbNnDlTjRo10pIlS7Rv3z5Vq1ZNly5d0qFDh5Q5c2ZNnTqVf3MBAABg4ZRwrXTp0jpw4ID2799v14LFmzZtkuTYNMh/m2zZstkcDZZYkyZNtGfPHn377bfq3bt3mtuYPXu2Ro8ererVq1t2CgUAwNmio6MtS0UkdufOHaulIMLDw63Ojx49WoGBgQoKCtKOHTsUERGhnDlzqkKFCqpbt666du2aJFiTpIEDB2rr1q06cuSI9u7dq3v37ilHjhwqUaKE3n33XXXt2lUlSpRI832UKVNGe/bs0ZgxY7R+/XqtWbNGuXPnVrNmzdSnTx+rYBAAAABwSrj25ptvav/+/frhhx/UvHnzFBe6v379uiZPniyDwaDGjRs7o/lnyuuvv57eXUji/v37unbtml1r3G3evPkp9Ch55zoUTNf2gdRERUWluog78Kx4Es/r1KlTNXXqVJvnihcvnuoPjGz56KOP9NFHH6X5utatW6t169Zpvs6efnp5eWn06NEaPXp0musHAADAf4tTwrUPP/xQkydP1vHjx9W6dWv98MMPyp8/f5JyW7duVZ8+fRQSEqKiRYuqffv2zmj+mZLaF5iwsLAMty7ZxIkTrdZye1RUVJSkhCmvVatWTbGuadOmOW2NOQAAAAAAgPTmlHAtd+7cmjdvnlq1aqWdO3fqhRdekLe3t+X866+/rkuXLsloNMpkMsnNzU1z585NdpfNjGzevHkpBkwLFy5U9+7dn2KPHl9ISIhd68KZTKZUyz148MBZ3QIAAAAAAEh3TgnXJMnPz08bNmxQ9+7d9ffff+vcuXOSEgKXI0eOWMpVrFhRU6dOZb21DGTQoEEaNGhQencDAAAAAADgmeO0cE2SKleurF27dmnXrl3asWOHzpw5o7CwMMviwvXq1Xsm1yRzpk6dOqU4Is+8S2h62LNnj9zd3e0q6+3trb/++uvJdggAAAAAACCDS3O41qxZMxkMBv3yyy/KmjWrzTK1atVSrVq1HrtzGdHVq1fTuwtJuLm52dxlLSX58uV7Qr0BAAAAAAD490hzuLZ7924ZDAbFx8fbPB8ZGany5csrU6ZMdq3T9W8REhLyxOr+9ddfFR8fn2yYmZquXbuqa9euTu4VAAAAAAAAnDotVEpYYy0sLEwGg8HZVf9nZc+ePb27AAAAAAAAABsypXcHAAAAAAAAgIyKcA0AAAAAAABwEOEaAAAAAAAA4CDCNQAAAAAAAMBBhGsAAAAAAACAgxzeLXTfvn3KmjVrkuNRUVGW13v37pXJZEqxHj8/P0e7AAAAAAAAAKQrh8O1Vq1aJXvOYDBIkpo2bZpiHQaDQSEhIY52AQAAAAAAAEhXDoVrqY1GAwAAAAAAAP4L0hyuTZ48+Un0AwAAAAAAAMhw0hyudejQ4Un0AwAAAAAAAMhw2C0UAAAAAAAAcBDhGgAAAAAAAOAgwjUAAAAAAADAQYRrAAAAAAAAgIMI1wAAAAAAAAAHEa4BAAAAAAAADiJcAwAAAAAAABxEuAYAAAAAAAA4iHANAAAAAAAAcBDhGgAAAAAAAOAgwjUAAAAAAADAQYRrAAAAAAAAgIMI1wAAAAAAAAAHEa4BAAAAAAAADiJcAwAAAAAAABxEuAYAAAAAAAA4iHANAAAAAAAAcBDhGgAAAAAAAOAgwjUAAAAAAADAQYRrAAAAAAAAgIMI1wAAAAAAAAAHEa4BAAAAAAAADiJcAwAAAAAAABxEuAYAAAAAAAA4iHANAAAAAAAAcBDhGgAAAAAAAOAgwjUAAAAAAADAQYRrAAAAAAAAgIMI1wAAAAAAAAAHEa4BAAAAAAAADiJcAwAAAAAAABxEuAYAAAAAAAA4iHANAAAAAAAAcBDhGgAAAAAAAOAgwjUAAAAAAADAQYRrAAD8S/3222/69ttvVbduXZUuXVr58uVTsWLFVLduXY0bN07379+3eV1oaKgGDx6sl156SQUKFFDx4sXVqFEjLVmyJNm2Fi5cKHd39xR/bd68Odnrb926pb59+6py5cry9PRUmTJl9N577+nIkSMO339MTIx++OEH+fn5qVChQipevLiaNGmilStXOlwnAAAA8KjM6d2BjCY6Olq//vqrJOmtt95Szpw5H7vO/v37KyQkRD169FDFihUfu76nbffu3erWrZsePHigQYMG6b333kvvLgEAJM2dO1cHDhxQmTJlVKVKFeXNm1e3bt3SgQMHdPjwYS1YsEBr165VwYIFLddcvHhRzZo1U3BwsJ577jnVrl1bDx480MGDB/XJJ59ox44dmjJligwGg802vb29VaNGDZvnEreT2NmzZ9WoUSPdvn1bJUqUUJMmTXTp0iWtXLlSa9eu1ezZs9WsWbM03XtkZKTefvtt/fnnn8qTJ4/q1auniIgI7dy5U3v27FGPHj00bNiwNNUJAAAA2EK4lkb3799X9+7dJUmvvvqqVbh27NgxnThxIsXrPT099frrr1sdW7lypYKDg9WyZUunhGsBAQGaP3++PvroI40ePdpmmR9++EGDBg1Sx44dNXny5Mdqr1y5cho+fLhmzJihRYsW6b333lP37t21cOFCDR48WD179nys+gEAjhk0aJBcXV1VqVIlZcuWzXL87t276tixowIDA9W/f3/NnDnTcq5r164KDg7Wq6++qgULFsjd3V2SdP78ebVs2VKLFy9WjRo1kv1BSo0aNTR16lS7+2gymdSlSxfdvn1bbdu21ZQpU+Ti4iJJmjNnjnr16iV/f3+99NJL8vLysrveIUOG6M8//1SFChW0evVqeXh4SJKOHDmipk2batKkSXr11VfVsGFDu+sEAAAAbMmQ4VqXLl104MCBNF1TuXJlLVy40OrYnDlzdPHiRbuu79Gjh/Lly5dimZUrV2rMmDEplvHz80sSriVn6dKldn9BWbJkiQoUKGBX2ZMnT2r48OHKmzevhgwZYtc1KcmfP7+8vb116NAhS5g3ZMgQ/fHHH/r+++/15ptv6vnnn7errlKLrisk+uFj9wl4stwkhaR3JwCbjB8UtryuVq2agoODk5R57rnnNGDAADVu3Fhbt261HN+/f78OHTokFxcXTZw40RKsSVLJkiX13XffqUOHDho9erQ6d+6c7Oi1tNi0aZOCgoKUJ08ejR071hKsSdL777+v33//XTt27NC0adP07bff2lWn0WjUrFmzJEnjxo2zBGuS5Ovrq549e+q7777T2LFjCdcAAADw2DJkuHbz5k2bXxZSYuun3b/88ov27Nlj1/UdOnRINVwzK1eunN544w2rY3///be2b98uKeF/+hOHZvfu3bNZz61bt+xeayY6OtquclLCNNTo6Gj179/f6guHo27duqUOHTqoXbt26tSpkyTJw8NDffr0Uf/+/dWvXz/99ttvj90OAMB5MmdO+F+ArFmzWo4dPnxYklSsWDF5e3snuaZOnTqSpCtX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eFyFChVUpEgRScp285vMEK7hsTt79qwkmX+hyUzp0qUt+gL/VHR0tH766SdJsvirmqnGChcurEKFCmU6NrN6jIuL0/Xr1yVlXcumcVevXrX4T/1B/wZcXFzMtwbyb+Dp9vnnn+vs2bOaMGGCXF1ds+1LrcJaTLfYeXh4aMSIEWratKnGjh2r+fPna/LkyerWrZuaN2+u8+fPm8dQr7CmqVOnqkKFCpo/f75q1aqlHj166K233lKdOnU0depUdevWTT/++KO5P/WKJ40t1STv7ZCdhIQEzZw5U5IyrGw8d+6c+fMH1ev9tfOgujMdT0tLs7hOTurVw8Mj02s+COEaHjvTttEFCxbMso9paWdcXNxjmROebsnJyXrvvfd08+ZNeXl56e233za3Ga3H9NufZzU2/RLlzMZmd01TG/8Gnl5bt27VvHnz9Nprr+mVV155YH9qFdZieqN26NAhTZ48We+++6727dunc+fOafXq1apcubL5gcKmVULUK6ypSpUq2rRpk1588UVdunRJGzZs0Lp163T27Fl5enqqadOmFs+3pF7xpLGlmuS9HbITEBCgs2fPqlSpUgoICLBoy0293l87D6q79McfV70SrgF46g0ZMkQhISEqWrSoFi5cmKvnsQCPQmxsrPz9/VW8eHF9++231p4OkK20tHsbyyclJalz584aN26cKleuLBcXFzVv3lyrVq1S/vz5dfToUf36669Wni0g7dq1S40bN9axY8c0Z84cnThxQpGRkVq2bJmSkpLk7++vDz74wNrTBICn2rfffqulS5cqf/78mjdvnooWLWrtKT1ShGt47ExJcPplyPczJcpZLYMGcmro0KFatGiRXF1dtWrVKlWuXNmi3Wg9pv+rX1Zj0/81JrOx2V3T1Ma/gafTp59+qosXL2rcuHEWuxRlh1qFtaSvofQ7eZmULVvWvBnHtm3bLMZQr3jcYmJi9Oabb+rq1atatGiROnfuLDc3N7m6uqpt27b69ddf5eTkpMWLF2v79u2SqFc8eWypJnlvh8x89913+vrrr5UvXz4tXrw4080DclOv99fOg+ou/fHHVa+Ea3jsTLvPZLZbiImpLbOdaoCcGj58uGbOnKnChQtr1apVqlWrVoY+phqLjY3NculvZvVYqFAh88MuL1y4kO24YsWKWSw9Np0nq3E3b97UzZs3M1wTT4/169fL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"},"metadata":{}}],"execution_count":90},{"cell_type":"code","source":"# Use just 3 columns => demo in streamlit app by getting only 3 inputs from users\ncols = [\"건축년도\", \"자치구명\", \"건물면적(㎡)\"]\nX_train = X_train[cols]\nX_test = X_test[cols]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:07:18.858524Z","iopub.execute_input":"2024-11-08T08:07:18.859054Z","iopub.status.idle":"2024-11-08T08:07:18.874795Z","shell.execute_reply.started":"2024-11-08T08:07:18.859010Z","shell.execute_reply":"2024-11-08T08:07:18.873528Z"}},"outputs":[],"execution_count":91},{"cell_type":"code","source":"X_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:07:19.995402Z","iopub.execute_input":"2024-11-08T08:07:19.995873Z","iopub.status.idle":"2024-11-08T08:07:20.011185Z","shell.execute_reply.started":"2024-11-08T08:07:19.995827Z","shell.execute_reply":"2024-11-08T08:07:20.009916Z"}},"outputs":[{"execution_count":92,"output_type":"execute_result","data":{"text/plain":"          건축년도  자치구명  건물면적(㎡)\n939553  2004.0     1    32.67\n85827   2008.0    14    20.46\n277566  1996.0     8    43.86\n637104  1995.0    18    51.84\n906113  2006.0    16   114.56","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>건축년도</th>\n      <th>자치구명</th>\n      <th>건물면적(㎡)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>939553</th>\n      <td>2004.0</td>\n      <td>1</td>\n      <td>32.67</td>\n    </tr>\n    <tr>\n      <th>85827</th>\n      <td>2008.0</td>\n      <td>14</td>\n      <td>20.46</td>\n    </tr>\n    <tr>\n      <th>277566</th>\n      <td>1996.0</td>\n      <td>8</td>\n      <td>43.86</td>\n    </tr>\n    <tr>\n      <th>637104</th>\n      <td>1995.0</td>\n      <td>18</td>\n      <td>51.84</td>\n    </tr>\n    <tr>\n      <th>906113</th>\n      <td>2006.0</td>\n      <td>16</td>\n      <td>114.56</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":92},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(eval_metric='rmsle')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:07:27.206473Z","iopub.execute_input":"2024-11-08T08:07:27.206941Z","iopub.status.idle":"2024-11-08T08:07:27.212429Z","shell.execute_reply.started":"2024-11-08T08:07:27.206901Z","shell.execute_reply":"2024-11-08T08:07:27.211109Z"}},"outputs":[],"execution_count":94},{"cell_type":"code","source":"# 특정 열을 category로 변환\nX_train[\"자치구명\"] = X_train[\"자치구명\"].astype('category')\nX_test[\"자치구명\"] = X_test[\"자치구명\"].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:11:36.983655Z","iopub.execute_input":"2024-11-08T08:11:36.984212Z","iopub.status.idle":"2024-11-08T08:11:37.012569Z","shell.execute_reply.started":"2024-11-08T08:11:36.984151Z","shell.execute_reply":"2024-11-08T08:11:37.011215Z"}},"outputs":[],"execution_count":96},{"cell_type":"code","source":"import xgboost as xgb\nfrom sklearn.model_selection import ParameterGrid\n\n# 직접 파라미터 조합을 설정\nparam_grid = {\"max_depth\":    [4, 5, 6],\n              \"n_estimators\": [500, 600, 700],\n              \"learning_rate\": [0.01, 0.015]}\n\nbest_params = None\nbest_score = float('-inf')\n\nfor params in ParameterGrid(param_grid):\n    regressor = xgb.XGBRegressor(**params, enable_categorical=True)\n    regressor.fit(X_train, y_train)\n    score = regressor.score(X_test, y_test)  # 평가 지표 사용 (예: R^2)\n    if score > best_score:\n        best_score = score\n        best_params = params\n\nprint(\"The best hyperparameters are \", best_params)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:11:39.473681Z","iopub.execute_input":"2024-11-08T08:11:39.474102Z","iopub.status.idle":"2024-11-08T08:17:30.019106Z","shell.execute_reply.started":"2024-11-08T08:11:39.474065Z","shell.execute_reply":"2024-11-08T08:17:30.017708Z"}},"outputs":[{"name":"stdout","text":"The best hyperparameters are  {'learning_rate': 0.015, 'max_depth': 6, 'n_estimators': 700}\n","output_type":"stream"}],"execution_count":97},{"cell_type":"code","source":"# 'cols' 리스트에 있는 열을 float 타입으로 변환\nX_train[cols] = X_train[cols].apply(lambda x: x.astype(float))\n\n# 집계 함수 적용\nX_train[cols].agg([\"mean\", \"max\", \"min\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:17:35.635112Z","iopub.execute_input":"2024-11-08T08:17:35.635583Z","iopub.status.idle":"2024-11-08T08:17:35.687158Z","shell.execute_reply.started":"2024-11-08T08:17:35.635534Z","shell.execute_reply":"2024-11-08T08:17:35.685984Z"}},"outputs":[{"execution_count":98,"output_type":"execute_result","data":{"text/plain":"             건축년도       자치구명     건물면적(㎡)\nmean  1961.552985  11.139531   58.141726\nmax   2024.000000  24.000000  579.270000\nmin      0.000000   0.000000    7.180000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>건축년도</th>\n      <th>자치구명</th>\n      <th>건물면적(㎡)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>mean</th>\n      <td>1961.552985</td>\n      <td>11.139531</td>\n      <td>58.141726</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2024.000000</td>\n      <td>24.000000</td>\n      <td>579.270000</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.180000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":98},{"cell_type":"code","source":"# cols = [\"LotFrontage\", \"LotArea\", \"GrLivArea\"]\nunseen_data = [[70, 10516, 1515], [313, 215245, 5642], [21, 1300, 334]]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:17:39.751568Z","iopub.execute_input":"2024-11-08T08:17:39.752413Z","iopub.status.idle":"2024-11-08T08:17:39.757993Z","shell.execute_reply.started":"2024-11-08T08:17:39.752365Z","shell.execute_reply":"2024-11-08T08:17:39.756612Z"}},"outputs":[],"execution_count":99},{"cell_type":"code","source":"result = regressor.predict(unseen_data)\nresult","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:17:40.670393Z","iopub.execute_input":"2024-11-08T08:17:40.670864Z","iopub.status.idle":"2024-11-08T08:17:40.679989Z","shell.execute_reply.started":"2024-11-08T08:17:40.670809Z","shell.execute_reply":"2024-11-08T08:17:40.679056Z"}},"outputs":[{"execution_count":100,"output_type":"execute_result","data":{"text/plain":"array([822192.1, 822192.1, 720840.7], dtype=float32)"},"metadata":{}}],"execution_count":100},{"cell_type":"code","source":"import pickle\nwith open(\"xgboost_feature3.pkl\", \"wb\") as f:\n    pickle.dump(regressor, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T08:17:41.547471Z","iopub.execute_input":"2024-11-08T08:17:41.548060Z","iopub.status.idle":"2024-11-08T08:17:41.590702Z","shell.execute_reply.started":"2024-11-08T08:17:41.548014Z","shell.execute_reply":"2024-11-08T08:17:41.589068Z"}},"outputs":[],"execution_count":101},{"cell_type":"code","source":"from IPython.display import FileLink\n\n# 파일 경로 지정\nfile_path = '/kaggle/working/'\n\n# 다운로드 링크 생성\nFileLink(file_path)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-08T07:30:07.115710Z","iopub.execute_input":"2024-11-08T07:30:07.116191Z","iopub.status.idle":"2024-11-08T07:30:07.199796Z","shell.execute_reply.started":"2024-11-08T07:30:07.116145Z","shell.execute_reply":"2024-11-08T07:30:07.198204Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[70], line 7\u001b[0m\n\u001b[1;32m      4\u001b[0m file_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m/kaggle/working/\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# 다운로드 링크 생성\u001b[39;00m\n\u001b[0;32m----> 7\u001b[0m \u001b[43mFileLink\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile_path\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/IPython/lib/display.py:407\u001b[0m, in \u001b[0;36mFileLink.__init__\u001b[0;34m(self, path, url_prefix, result_html_prefix, result_html_suffix)\u001b[0m\n\u001b[1;32m    393\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    394\u001b[0m \u001b[38;5;124;03mParameters\u001b[39;00m\n\u001b[1;32m    395\u001b[0m \u001b[38;5;124;03m----------\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    404\u001b[0m \u001b[38;5;124;03m    text to append at the end of link [default: '<br>']\u001b[39;00m\n\u001b[1;32m    405\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    406\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m isdir(path):\n\u001b[0;32m--> 407\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCannot display a directory using FileLink. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    408\u001b[0m       \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUse FileLinks to display \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m path)\n\u001b[1;32m    409\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpath \u001b[38;5;241m=\u001b[39m fsdecode(path)\n\u001b[1;32m    410\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39murl_prefix \u001b[38;5;241m=\u001b[39m url_prefix\n","\u001b[0;31mValueError\u001b[0m: Cannot display a directory using FileLink. Use FileLinks to display '/kaggle/working/'."],"ename":"ValueError","evalue":"Cannot display a directory using FileLink. Use FileLinks to display '/kaggle/working/'.","output_type":"error"}],"execution_count":70},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}