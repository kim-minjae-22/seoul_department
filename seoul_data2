{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9838723,"sourceType":"datasetVersion","datasetId":6035419},{"sourceId":9839034,"sourceType":"datasetVersion","datasetId":6035639}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"mungjae/seoul-data-set\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T03:09:04.578507Z","iopub.execute_input":"2024-11-12T03:09:04.578983Z","iopub.status.idle":"2024-11-12T03:09:05.809165Z","shell.execute_reply.started":"2024-11-12T03:09:04.578940Z","shell.execute_reply":"2024-11-12T03:09:05.807807Z"}},"outputs":[{"name":"stdout","text":"Path to dataset files: /kaggle/input/seoul-data-set\n","output_type":"stream"}],"execution_count":52},{"cell_type":"code","source":"# 필요한 라이브러리 임포트\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# 1. 데이터 불러오기\n\n# 예: 집값 데이터셋 파일을 CSV로 불러오기\n# data = pd.read_csv('house_prices.csv')\n\n# 예제 데이터 생성\ndata = pd.read_csv('/kaggle/input/seoul-data-set/.csv', encoding='cp949', low_memory=False)\nprint(len(data))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:00:47.836564Z","iopub.execute_input":"2024-11-12T05:00:47.837152Z","iopub.status.idle":"2024-11-12T05:00:53.016147Z","shell.execute_reply.started":"2024-11-12T05:00:47.837099Z","shell.execute_reply":"2024-11-12T05:00:53.014781Z"}},"outputs":[{"name":"stdout","text":"1026032\n","output_type":"stream"}],"execution_count":80},{"cell_type":"code","source":"# 2. 특성과 타깃 변수 분리\ncols1 = [\"접수연도\",\"자치구명\",\"계약일\",\"건물면적(㎡)\",\"토지면적(㎡)\",\"층\",\"건축년도\",\"건물용도\"]\nX = data[cols1]\ncols2 = ['물건금액(만원)']\ny = data[cols2]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:00.849227Z","iopub.execute_input":"2024-11-12T05:01:00.849655Z","iopub.status.idle":"2024-11-12T05:01:00.902904Z","shell.execute_reply.started":"2024-11-12T05:01:00.849618Z","shell.execute_reply":"2024-11-12T05:01:00.901689Z"}},"outputs":[],"execution_count":81},{"cell_type":"code","source":"# NaN 값을 가진 행의 인덱스 식별\nnan_indices = X[X.isna().any(axis=1)].index\n\n# X에서 NaN 값을 가진 행 제거\nX_cleaned = X.dropna()\n\n# y에서 동일한 인덱스의 행 제거\ny_cleaned = y.drop(nan_indices)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:01.788394Z","iopub.execute_input":"2024-11-12T05:01:01.788866Z","iopub.status.idle":"2024-11-12T05:01:02.202701Z","shell.execute_reply.started":"2024-11-12T05:01:01.788823Z","shell.execute_reply":"2024-11-12T05:01:02.201653Z"}},"outputs":[],"execution_count":82},{"cell_type":"code","source":"print(len(X_cleaned))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:03.315046Z","iopub.execute_input":"2024-11-12T05:01:03.315443Z","iopub.status.idle":"2024-11-12T05:01:03.321434Z","shell.execute_reply.started":"2024-11-12T05:01:03.315408Z","shell.execute_reply":"2024-11-12T05:01:03.319858Z"}},"outputs":[{"name":"stdout","text":"769936\n","output_type":"stream"}],"execution_count":83},{"cell_type":"code","source":"y_cleaned","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:03.971161Z","iopub.execute_input":"2024-11-12T05:01:03.971561Z","iopub.status.idle":"2024-11-12T05:01:03.983842Z","shell.execute_reply.started":"2024-11-12T05:01:03.971524Z","shell.execute_reply":"2024-11-12T05:01:03.982633Z"}},"outputs":[{"execution_count":84,"output_type":"execute_result","data":{"text/plain":"         물건금액(만원)\n0           33500\n3           11000\n4           27250\n5           27050\n6           25650\n...           ...\n1026025     56730\n1026027     46500\n1026028     46500\n1026030     18000\n1026031     71000\n\n[769936 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>물건금액(만원)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>33500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27250</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>27050</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>25650</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1026025</th>\n      <td>56730</td>\n    </tr>\n    <tr>\n      <th>1026027</th>\n      <td>46500</td>\n    </tr>\n    <tr>\n      <th>1026028</th>\n      <td>46500</td>\n    </tr>\n    <tr>\n      <th>1026030</th>\n      <td>18000</td>\n    </tr>\n    <tr>\n      <th>1026031</th>\n      <td>71000</td>\n    </tr>\n  </tbody>\n</table>\n<p>769936 rows × 1 columns</p>\n</div>"},"metadata":{}}],"execution_count":84},{"cell_type":"code","source":"# 3. 학습/테스트 데이터 분리\nX_train, X_test, y_train, y_test = train_test_split(X_cleaned, y_cleaned, test_size=0.2, random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:04.703852Z","iopub.execute_input":"2024-11-12T05:01:04.704262Z","iopub.status.idle":"2024-11-12T05:01:04.992349Z","shell.execute_reply.started":"2024-11-12T05:01:04.704225Z","shell.execute_reply":"2024-11-12T05:01:04.991267Z"}},"outputs":[],"execution_count":85},{"cell_type":"code","source":"import pandas  as pd\nimport numpy   as np\nimport xgboost as xgb","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:05.473309Z","iopub.execute_input":"2024-11-12T05:01:05.473711Z","iopub.status.idle":"2024-11-12T05:01:05.479236Z","shell.execute_reply.started":"2024-11-12T05:01:05.473676Z","shell.execute_reply":"2024-11-12T05:01:05.477856Z"}},"outputs":[],"execution_count":86},{"cell_type":"code","source":"X_train['접수연도'] = X_train['접수연도'].astype('category')\nX_train['건축년도'] = X_train['건축년도'].astype('category')\nX_train['건물용도'] = X_train['건물용도'].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:05.992269Z","iopub.execute_input":"2024-11-12T05:01:05.992693Z","iopub.status.idle":"2024-11-12T05:01:06.097614Z","shell.execute_reply.started":"2024-11-12T05:01:05.992654Z","shell.execute_reply":"2024-11-12T05:01:06.096518Z"}},"outputs":[],"execution_count":87},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# 필요한 열을 인코딩\nX_train['접수연도'] = X_train['접수연도'].astype('category')\nX_train['건축년도'] = X_train['건축년도'].astype('category')\nX_train['건물용도'] = X_train['건물용도'].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:06.503848Z","iopub.execute_input":"2024-11-12T05:01:06.504279Z","iopub.status.idle":"2024-11-12T05:01:06.513696Z","shell.execute_reply.started":"2024-11-12T05:01:06.504239Z","shell.execute_reply":"2024-11-12T05:01:06.512436Z"}},"outputs":[],"execution_count":88},{"cell_type":"code","source":"print(X_train.dtypes)  # object 타입 열을 모두 확인하기","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:07.001358Z","iopub.execute_input":"2024-11-12T05:01:07.001790Z","iopub.status.idle":"2024-11-12T05:01:07.009560Z","shell.execute_reply.started":"2024-11-12T05:01:07.001735Z","shell.execute_reply":"2024-11-12T05:01:07.008193Z"}},"outputs":[{"name":"stdout","text":"접수연도       category\n자치구명         object\n계약일           int64\n건물면적(㎡)     float64\n토지면적(㎡)     float64\n층           float64\n건축년도       category\n건물용도       category\ndtype: object\n","output_type":"stream"}],"execution_count":89},{"cell_type":"code","source":"print(X_train.columns)\nprint(X_test.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:01:07.921278Z","iopub.execute_input":"2024-11-12T05:01:07.922252Z","iopub.status.idle":"2024-11-12T05:01:07.928088Z","shell.execute_reply.started":"2024-11-12T05:01:07.922207Z","shell.execute_reply":"2024-11-12T05:01:07.926701Z"}},"outputs":[{"name":"stdout","text":"Index(['접수연도', '자치구명', '계약일', '건물면적(㎡)', '토지면적(㎡)', '층', '건축년도', '건물용도'], dtype='object')\nIndex(['접수연도', '자치구명', '계약일', '건물면적(㎡)', '토지면적(㎡)', '층', '건축년도', '건물용도'], dtype='object')\n","output_type":"stream"}],"execution_count":90},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# 객체형 컬럼을 Label Encoding으로 변환\nfor col in X_train.select_dtypes(include=['object', 'category']).columns:\n    le = LabelEncoder()\n    X_train[col] = le.fit_transform(X_train[col])\n\n# 그리드 서치 실행\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    \"max_depth\": [4, 5],\n    \"n_estimators\": [500, 600],\n    \"learning_rate\": [0.01, 0.015]\n}\n\nsearch = GridSearchCV(regressor, param_grid, cv=3).fit(X_train, y_train)\nprint(\"The best hyperparameters are \", search.best_params_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:02:29.472686Z","iopub.execute_input":"2024-11-12T05:02:29.473161Z","iopub.status.idle":"2024-11-12T05:06:19.361881Z","shell.execute_reply.started":"2024-11-12T05:02:29.473118Z","shell.execute_reply":"2024-11-12T05:06:19.360559Z"}},"outputs":[{"name":"stdout","text":"The best hyperparameters are  {'learning_rate': 0.015, 'max_depth': 5, 'n_estimators': 600}\n","output_type":"stream"}],"execution_count":93},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(learning_rate = search.best_params_[\"learning_rate\"],\n                           n_estimators  = search.best_params_[\"n_estimators\"],\n                           max_depth     = search.best_params_[\"max_depth\"],\n                           eval_metric='rmsle')\n\nregressor.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:06:22.953935Z","iopub.execute_input":"2024-11-12T05:06:22.954359Z","iopub.status.idle":"2024-11-12T05:06:37.828619Z","shell.execute_reply.started":"2024-11-12T05:06:22.954321Z","shell.execute_reply":"2024-11-12T05:06:37.827515Z"}},"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric='rmsle', feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=5, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=600, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=5, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=600, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=&#x27;rmsle&#x27;, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=0.015, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=5, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=600, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":94},{"cell_type":"code","source":"import pickle\nwith open(\"xgboost_feature_full.pkl\", \"wb\") as f:\n    pickle.dump(regressor, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:06:38.651504Z","iopub.execute_input":"2024-11-12T05:06:38.651957Z","iopub.status.idle":"2024-11-12T05:06:38.673010Z","shell.execute_reply.started":"2024-11-12T05:06:38.651916Z","shell.execute_reply":"2024-11-12T05:06:38.671858Z"}},"outputs":[],"execution_count":95},{"cell_type":"code","source":"import matplotlib.font_manager as fm\n', '.join(sorted([font.name for font in fm.fontManager.ttflist]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:06:39.712136Z","iopub.execute_input":"2024-11-12T05:06:39.712563Z","iopub.status.idle":"2024-11-12T05:06:39.720830Z","shell.execute_reply.started":"2024-11-12T05:06:39.712524Z","shell.execute_reply":"2024-11-12T05:06:39.719676Z"}},"outputs":[{"execution_count":96,"output_type":"execute_result","data":{"text/plain":"'DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans, DejaVu Sans Display, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Sans Mono, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif, DejaVu Serif Display, Latin Modern Math, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono, Latin Modern Mono Caps, Latin Modern Mono Caps, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light, Latin Modern Mono Light Cond, Latin Modern Mono Light Cond, Latin Modern Mono Prop, Latin Modern Mono Prop, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Prop Light, Latin Modern Mono Slanted, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman, Latin Modern Roman Caps, Latin Modern Roman Caps, Latin Modern Roman Demi, Latin Modern Roman Demi, Latin Modern Roman Dunhill, Latin Modern Roman Dunhill, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Slanted, Latin Modern Roman Unslanted, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans, Latin Modern Sans Demi Cond, Latin Modern Sans Demi Cond, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, Latin Modern Sans Quotation, STIXGeneral, STIXGeneral, STIXGeneral, STIXGeneral, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXNonUnicode, STIXSizeFiveSym, STIXSizeFourSym, STIXSizeFourSym, STIXSizeOneSym, STIXSizeOneSym, STIXSizeThreeSym, STIXSizeThreeSym, STIXSizeTwoSym, STIXSizeTwoSym, cmb10, cmex10, cmmi10, cmr10, cmss10, cmsy10, cmtt10'"},"metadata":{}}],"execution_count":96},{"cell_type":"code","source":"from xgboost import plot_importance\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\n\n# 한글 폰트 경로 지정\nfont_path = '/kaggle/input/nanumfontsetup-ttf-square/NanumSquare_acB.ttf'\nfont_prop = FontProperties(fname=font_path)\n\n# 스타일 및 폰트 크기 설정\nplt.style.use('fivethirtyeight')\nplt.rcParams.update({'font.size': 16})\n\n# 플롯 생성 및 한글 폰트 적용\nfig, ax = plt.subplots(figsize=(12, 6))\n\n# 중요도 유형을 'weight' 또는 'gain'으로 설정\nplot_importance(regressor, max_num_features=8, importance_type='weight', ax=ax)  # importance_type을 'weight'로 설정\n\n# 또는 'gain'으로 설정할 수도 있습니다:\n# plot_importance(regressor, max_num_features=8, importance_type='gain', ax=ax)\n\n# x축과 y축 폰트 설정\nfor label in ax.get_yticklabels():\n    label.set_fontproperties(font_prop)\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:11:03.602986Z","iopub.execute_input":"2024-11-12T05:11:03.603407Z","iopub.status.idle":"2024-11-12T05:11:03.866616Z","shell.execute_reply.started":"2024-11-12T05:11:03.603368Z","shell.execute_reply":"2024-11-12T05:11:03.865442Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x600 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":99},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# 모델의 특성 중요도 확인\nimportances = regressor.feature_importances_\n\n# 중요도와 함께 특성 이름을 데이터프레임으로 변환\nfeature_names = X_train.columns  # X_train이 pandas DataFrame인 경우\nfeatures_importance_df = pd.DataFrame({\n    'Feature': feature_names,\n    'Importance': importances\n})\n\n# 중요도가 높은 순서대로 정렬\nfeatures_importance_df = features_importance_df.sort_values(by='Importance', ascending=False)\n\n# 상위 8개 특성 출력\nprint(features_importance_df.head(8))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:10:49.863527Z","iopub.execute_input":"2024-11-12T05:10:49.864003Z","iopub.status.idle":"2024-11-12T05:10:49.876505Z","shell.execute_reply.started":"2024-11-12T05:10:49.863959Z","shell.execute_reply":"2024-11-12T05:10:49.875267Z"}},"outputs":[{"name":"stdout","text":"   Feature  Importance\n3  건물면적(㎡)    0.278543\n7     건물용도    0.278339\n2      계약일    0.133969\n0     접수연도    0.131885\n1     자치구명    0.078695\n6     건축년도    0.049888\n5        층    0.027510\n4  토지면적(㎡)    0.021172\n","output_type":"stream"}],"execution_count":98},{"cell_type":"code","source":"# Use just 3 columns => demo in streamlit app by getting only 3 inputs from users\ncols = [\"건축년도\", \"자치구명\", \"건물면적(㎡)\",\"계약일\"]\nX_train = X_train[cols]\nX_test = X_test[cols]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:26:43.279791Z","iopub.execute_input":"2024-11-12T05:26:43.280219Z","iopub.status.idle":"2024-11-12T05:26:43.345145Z","shell.execute_reply.started":"2024-11-12T05:26:43.280182Z","shell.execute_reply":"2024-11-12T05:26:43.344013Z"}},"outputs":[],"execution_count":101},{"cell_type":"code","source":"X_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:26:48.622633Z","iopub.execute_input":"2024-11-12T05:26:48.623633Z","iopub.status.idle":"2024-11-12T05:26:48.635303Z","shell.execute_reply.started":"2024-11-12T05:26:48.623589Z","shell.execute_reply":"2024-11-12T05:26:48.634056Z"}},"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"        건축년도  자치구명  건물면적(㎡)       계약일\n939553    47     1    32.67  20180525\n85827     51    14    20.46  20240817\n277566    39     8    43.86  20210620\n637104    38    18    51.84  20190520\n906113    49    16   114.56  20180814","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>건축년도</th>\n      <th>자치구명</th>\n      <th>건물면적(㎡)</th>\n      <th>계약일</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>939553</th>\n      <td>47</td>\n      <td>1</td>\n      <td>32.67</td>\n      <td>20180525</td>\n    </tr>\n    <tr>\n      <th>85827</th>\n      <td>51</td>\n      <td>14</td>\n      <td>20.46</td>\n      <td>20240817</td>\n    </tr>\n    <tr>\n      <th>277566</th>\n      <td>39</td>\n      <td>8</td>\n      <td>43.86</td>\n      <td>20210620</td>\n    </tr>\n    <tr>\n      <th>637104</th>\n      <td>38</td>\n      <td>18</td>\n      <td>51.84</td>\n      <td>20190520</td>\n    </tr>\n    <tr>\n      <th>906113</th>\n      <td>49</td>\n      <td>16</td>\n      <td>114.56</td>\n      <td>20180814</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":102},{"cell_type":"code","source":"regressor=xgb.XGBRegressor(eval_metric='rmsle')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:26:56.464601Z","iopub.execute_input":"2024-11-12T05:26:56.465039Z","iopub.status.idle":"2024-11-12T05:26:56.470432Z","shell.execute_reply.started":"2024-11-12T05:26:56.464997Z","shell.execute_reply":"2024-11-12T05:26:56.469343Z"}},"outputs":[],"execution_count":103},{"cell_type":"code","source":"X_train.loc[:, \"자치구명\"] = X_train[\"자치구명\"].astype('category')\nX_test.loc[:, \"자치구명\"] = X_test[\"자치구명\"].astype('category')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:27:59.240369Z","iopub.execute_input":"2024-11-12T05:27:59.240849Z","iopub.status.idle":"2024-11-12T05:27:59.267107Z","shell.execute_reply.started":"2024-11-12T05:27:59.240804Z","shell.execute_reply":"2024-11-12T05:27:59.265888Z"}},"outputs":[],"execution_count":106},{"cell_type":"code","source":"import xgboost as xgb\nfrom sklearn.model_selection import ParameterGrid\n\n# 직접 파라미터 조합을 설정\nparam_grid = {\"max_depth\":    [4, 5, 6],\n              \"n_estimators\": [500, 600, 700],\n              \"learning_rate\": [0.01, 0.015]}\n\nbest_params = None\nbest_score = float('-inf')\n\nfor params in ParameterGrid(param_grid):\n    regressor = xgb.XGBRegressor(**params, enable_categorical=True)\n    regressor.fit(X_train, y_train)\n    score = regressor.score(X_test, y_test)  # 평가 지표 사용 (예: R^2)\n    if score > best_score:\n        best_score = score\n        best_params = params\n\nprint(\"The best hyperparameters are \", best_params)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:28:02.258666Z","iopub.execute_input":"2024-11-12T05:28:02.259159Z","iopub.status.idle":"2024-11-12T05:33:52.688351Z","shell.execute_reply.started":"2024-11-12T05:28:02.259120Z","shell.execute_reply":"2024-11-12T05:33:52.687042Z"}},"outputs":[{"name":"stdout","text":"The best hyperparameters are  {'learning_rate': 0.01, 'max_depth': 4, 'n_estimators': 500}\n","output_type":"stream"}],"execution_count":107},{"cell_type":"code","source":"import pandas as pd\n\n# 계약일을 날짜 형식으로 변환 (예: 'YYYYMMDD' 형식으로 가정)\nX_train['계약일'] = pd.to_datetime(X_train['계약일'], format='%Y%m%d')\n\n# 계약일 열을 제외한 다른 열들만 float으로 변환\nnumeric_cols = [col for col in cols if col != '계약일' and col != '자치구명']  # 계약일과 자치구명을 제외한 열 리스트\nX_train.loc[:, numeric_cols] = X_train[numeric_cols].apply(lambda x: x.astype(float))\n\n# 집계 함수 적용 (숫자형 열에 대해서만)\nagg_result = X_train[numeric_cols].agg([\"mean\", \"max\", \"min\"])\n\n# 자치구명에 대한 집계 (고유값과 최빈값 출력)\narea_unique = X_train['자치구명'].unique()  # 고유값\narea_mode = X_train['자치구명'].mode().iloc[0]  # 최빈값 (최빈값이 여러 개일 수 있으므로 첫 번째 값을 선택)\n\n# 계약일에 대한 집계 함수 적용 (datetime 타입에서 min, max는 바로 사용 가능)\ncontract_date_agg = X_train['계약일'].agg([\"min\", \"max\"])\n\n# 계약일의 평균 계산 (datetime을 일수로 변환하여 평균 계산)\ncontract_date_mean = (X_train['계약일'] - X_train['계약일'].min()).dt.days.mean()\ncontract_date_mean = pd.to_datetime(contract_date_mean, unit='D', origin=X_train['계약일'].min())\n\n# 결과 출력\nprint(\"Aggregated data for numeric columns:\")\nprint(agg_result)\nprint(\"\\nAggregated data for 자치구명:\")\nprint(f\"Unique values: {area_unique}\")\nprint(f\"Mode (Most frequent): {area_mode}\")\nprint(\"\\nAggregated data for 계약일:\")\nprint(contract_date_agg)\nprint(\"\\nMean of 계약일:\")\nprint(contract_date_mean)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:48:21.797352Z","iopub.execute_input":"2024-11-12T05:48:21.797835Z","iopub.status.idle":"2024-11-12T05:48:21.907288Z","shell.execute_reply.started":"2024-11-12T05:48:21.797791Z","shell.execute_reply":"2024-11-12T05:48:21.906141Z"}},"outputs":[{"name":"stdout","text":"Aggregated data for numeric columns:\n           건축년도     건물면적(㎡)\nmean  46.066554   58.141726\nmax   67.000000  579.270000\nmin    0.000000    7.180000\n\nAggregated data for 자치구명:\nUnique values: [ 1. 14.  8. 18. 16. 13.  0.  7.  6.  2. 24. 20. 17. 21.  3. 10.  5. 23.\n 15. 19.  9.  4. 12. 11. 22.]\nMode (Most frequent): 3.0\n\nAggregated data for 계약일:\nmin   2007-03-29\nmax   2024-11-04\nName: 계약일, dtype: datetime64[ns]\n\nMean of 계약일:\n2020-05-18 16:40:19.684778756\n","output_type":"stream"}],"execution_count":121},{"cell_type":"code","source":"import pickle\nwith open(\"xgboost_feature3.pkl\", \"wb\") as f:\n    pickle.dump(regressor, f)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-12T05:40:29.376811Z","iopub.execute_input":"2024-11-12T05:40:29.377305Z","iopub.status.idle":"2024-11-12T05:40:29.416284Z","shell.execute_reply.started":"2024-11-12T05:40:29.377263Z","shell.execute_reply":"2024-11-12T05:40:29.414828Z"}},"outputs":[],"execution_count":117},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}